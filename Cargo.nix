# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "gam/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
}:
let
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
in let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
    dev = builtins.fromTOML "opt-level = 1\n[package.\"*\"]\nopt-level = 3\n";
    release = builtins.fromTOML "codegen-units = 1\n";
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts rustcLinkFlags rustcBuildFlags; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    gam = rustPackages.unknown.gam."0.1.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.21" = overridableMkRustCrate (profileName: rec {
    name = "ab_glyph";
    version = "0.2.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5110f1c78cf582855d895ecd0746b653db010cec6d9f5575293f27934d980a39"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "variable-fonts" ]
    ];
    dependencies = {
      ab_glyph_rasterizer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.8" { inherit profileName; };
      owned_ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.19.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.8" = overridableMkRustCrate (profileName: rec {
    name = "ab_glyph_rasterizer";
    version = "0.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c71b1793ee61086797f5c80b6efa2b8ffa6d5dd703f118545808a7f2e27f7046"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "accesskit";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "02c98a5d094590335462354da402d754fe2cb78f0e6ce5024611c28ed539c1de"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit_consumer."0.15.0" = overridableMkRustCrate (profileName: rec {
    name = "accesskit_consumer";
    version = "0.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca541e0fdb600916d196a940228df99b86d804fd2e6ef13894d7814f2799db43"; };
    dependencies = {
      accesskit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit_macos."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "accesskit_macos";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4baea9413f0daf1cd4aab199bc09f8139cd726ce7673d523c27d186b8b878325"; };
    dependencies = {
      accesskit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.0" { inherit profileName; };
      accesskit_consumer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_consumer."0.15.0" { inherit profileName; };
      objc2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc2."0.3.0-beta.3.patch-leaks.3" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit_windows."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "accesskit_windows";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e11c7f177739f23bd19bb856e4a64fdd96eb8638ec0a6a6dde9a7019a9e91c53"; };
    dependencies = {
      accesskit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.0" { inherit profileName; };
      accesskit_consumer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_consumer."0.15.0" { inherit profileName; };
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      paste = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.12" { profileName = "__noProfile"; };
      windows = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows."0.44.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".accesskit_winit."0.14.1" = overridableMkRustCrate (profileName: rec {
    name = "accesskit_winit";
    version = "0.14.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14f1bd64cd0b480cafb7bdd91eb489a1ff50f0f5702437b9efa32a25b8bb82a1"; };
    dependencies = {
      accesskit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "accesskit_macos" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_macos."0.7.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "accesskit_windows" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_windows."0.14.0" { inherit profileName; };
      winit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.28.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97"; };
    dependencies = {
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.27.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "adler";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.6" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.7.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; };
      ${ if !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none") then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c99f64d1e06488f620f932677e24bc6e2897582980441ae90a671415bd7ec2f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "getrandom" ]
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "no-rng")
      [ "runtime-rng" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; };
      ${ if !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none") then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "43f6cb1bf222025340178f382c426f13757b2960e89779dfcb319c32542a5a41"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "perf-literal" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".allocator-api2."0.2.16" = overridableMkRustCrate (profileName: rec {
    name = "allocator-api2";
    version = "0.2.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0942ffc6dcaadf03badf6e6a2d0228460359d5e34b57ccdc720b7382dfbd5ec5"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".alsa."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "alsa";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8512c9117059663fb5606788fbca3619e2a91dac0e3fe516242eab1fa6be5e44"; };
    dependencies = {
      alsa_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alsa-sys."0.3.1" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".alsa-sys."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "alsa-sys";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "db8fee663d06c4e303404ef5f40488a53e062f89ba8bfed81f42325aafad1527"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.27" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android-activity."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "android-activity";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c77a0045eda8b888c76ea473c2b0515ba6f471d318f8927c5c72240937035a6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "native-activity" ]
    ];
    dependencies = {
      android_properties = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android-properties."0.2.2" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      ndk = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" { inherit profileName; };
      ndk_context = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" { inherit profileName; };
      ndk_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.4.1+23.1.7779620" { inherit profileName; };
      num_enum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.11" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.79" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android-properties."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "android-properties";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fc7eb209b1518d6bb87b283c20095f5228ecda460da70b44f0802523dea6da04"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "android_log-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "27f0fc03f560e1aebde41c2398b691cb98b5ea5996a6184a7a67bbbb77448969"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "android_system_properties";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" = overridableMkRustCrate (profileName: rec {
    name = "anyhow";
    version = "1.0.71";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c7d0618f0e0b7e8ff11427422b64564d5fb0be1940354bfe2e0529b18a9d9b8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "approx";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arboard."3.2.0" = overridableMkRustCrate (profileName: rec {
    name = "arboard";
    version = "3.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d6041616acea41d67c4a984709ddab1587fd0b10efe5cc563fee954d2f011854"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "core-graphics")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "image")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "image-data")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "clipboard_win" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clipboard-win."4.5.0" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "darwin" then "core_graphics" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && (hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "emscripten") || hostPlatform.parsed.kernel.name == "darwin") then "image" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".image."0.24.6" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && (hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "emscripten") || hostPlatform.isWindows) then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "darwin" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "darwin" then "objc_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc-foundation."0.1.1" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "darwin" then "objc_id" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_id."0.1.1" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "darwin" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "emscripten") then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "emscripten") then "x11rb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11rb."0.10.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8da52d66c7071e2e3fa2a1e5c6d088fec47b593032b254f5e980de8ea54454d6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ash."0.37.2+1.3.238" = overridableMkRustCrate (profileName: rec {
    name = "ash";
    version = "0.37.2+1.3.238";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "28bf19c1f0a470be5fbf7522a308a05df06610252c5bcf5143e1b23f629a9a03"; };
    features = builtins.concatLists [
      [ "debug" ]
      [ "default" ]
      [ "libloading" ]
      [ "loaded" ]
    ];
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-channel."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "async-channel";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf46fee83e5ccffc220104713af3292ff9bc7c64c7de289f66dae8e38d826833"; };
    dependencies = {
      concurrent_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.2.0" { inherit profileName; };
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-executor."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "async-executor";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6fa3dc5f2a8564f07759c008b9109dc0d39de92a88d5588b8a5036d286383afb"; };
    dependencies = {
      async_lock = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."2.7.0" { inherit profileName; };
      async_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-task."4.4.0" { inherit profileName; };
      concurrent_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.2.0" { inherit profileName; };
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.9.0" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-lock."2.7.0" = overridableMkRustCrate (profileName: rec {
    name = "async-lock";
    version = "2.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa24f727524730b077666307f2734b4a1a1c57acb79193127dcc8914d5242dd7"; };
    dependencies = {
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-task."4.4.0" = overridableMkRustCrate (profileName: rec {
    name = "async-task";
    version = "4.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ecc7ab41815b3c653ccd2978ec3255c81349336702dfdf62ee6f7069b12a3aae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atomic-arena."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "atomic-arena";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5450eca8ce5abcfd5520727e975ebab30ccca96030550406b0ca718b224ead10"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atomic_refcell."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "atomic_refcell";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79d6dc922a2792b006573f60b2648076355daeae5ce9cb59507e5908c9625d31"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.67" = overridableMkRustCrate (profileName: rec {
    name = "backtrace";
    version = "0.3.67";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "233d376d6d185f2a3093e58f283f60f880315b6c60075b01f36b3b85154564ca"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      addr2line = rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.19.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.6.2" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.30.4" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.23" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.79" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "04a90fe8e9c03fa2d30acf39a5178a48526df00c1ccea2fc43fa6d9ca4d8a168"; };
    features = builtins.concatLists [
      [ "android_shared_stdcxx" ]
      [ "animation" ]
      [ "bevy_animation" ]
      [ "bevy_asset" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "bevy_audio")
      [ "bevy_core_pipeline" ]
      [ "bevy_gilrs" ]
      [ "bevy_gizmos" ]
      [ "bevy_gltf" ]
      [ "bevy_pbr" ]
      [ "bevy_render" ]
      [ "bevy_scene" ]
      [ "bevy_sprite" ]
      [ "bevy_text" ]
      [ "bevy_ui" ]
      [ "bevy_winit" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default_font")
      [ "filesystem_watcher" ]
      [ "hdr" ]
      [ "ktx2" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "multi-threaded")
      [ "png" ]
      [ "serialize" ]
      [ "tonemapping_luts" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "vorbis")
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "webgl2")
      [ "x11" ]
      [ "zstd" ]
    ];
    dependencies = {
      bevy_internal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_internal."0.11.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy-debug-text-overlay."6.0.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy-debug-text-overlay";
    version = "6.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6479455b22afb7e9d8c9c46aad34bc5626ac0acef4ab5a5247ad70b13ed55d4c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "builtin-font")
      (lib.optional (rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "debug")
      (lib.optional (rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "lazy_static")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bevy" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.11.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_a11y."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_a11y";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f758f437d9d862bf10a8e3a0f76b426095c19a87d118c945dcb935358d856076"; };
    dependencies = {
      accesskit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit."0.11.0" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_animation."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_animation";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d130cb8b7e2b81304591c5c8e511accd2df58b8d8185ab4836ed2f377e6a61f"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_hierarchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_hierarchy."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" { inherit profileName; };
      bevy_time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_time."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_app";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1817e8d5b1146ea9e7730a7264d3470394840e0754d15abded26473f867967a0"; };
    features = builtins.concatLists [
      [ "bevy_reflect" ]
      [ "default" ]
    ];
    dependencies = {
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_asset";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e12f951d4af2ad4ad230cd7bcb05248149c415eec17c34bf26731c4cd8b897f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "filesystem_watcher" ]
      [ "notify" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_diagnostic = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_diagnostic."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "bevy_winit" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_winit."0.11.0" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.8" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.9.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      notify = rustPackages."registry+https://github.com/rust-lang/crates.io-index".notify."6.0.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.36" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_audio."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_audio";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a6bade3f5389f9463e150af874aebe672b5101df4268d28b0109a66f9cdce56e"; };
    features = builtins.concatLists [
      [ "android_shared_stdcxx" ]
      [ "oboe" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "vorbis")
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "oboe" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oboe."0.5.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      rodio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rodio."0.17.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_core";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "263b6a943ecba176c8390a1100615021f61a3b2d7a87e8eecf4009b6ed4457e0"; };
    features = builtins.concatLists [
      [ "serialize" ]
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_core_pipeline."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_core_pipeline";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50c70113b5c4106855b888f96d8574697eb9082713f976c9b6487c1f5ab28589"; };
    features = builtins.concatLists [
      [ "tonemapping_luts" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "webgl")
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.11.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.3.3" { inherit profileName; };
      radsort = rustPackages."registry+https://github.com/rust-lang/crates.io-index".radsort."0.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_derive";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1477347b17df781756ba0dfd677e2975e57e930752cd3cd42e6cdd8fdaa3223"; };
    dependencies = {
      bevy_macro_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_macro_utils."0.11.0" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_diagnostic."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_diagnostic";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "37a594f970c261007cdd3edeccd61651c2cb4513de3d0b8b35d93f5d9c32c059"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.11.0" { inherit profileName; };
      bevy_time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_time."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "android" then "sysinfo" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sysinfo."0.29.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ecs";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "032c81ba7d919c1004b0abc33cc6c588c8f896a4d7c55a7c7aa1e46382242f43"; };
    features = builtins.concatLists [
      [ "bevy_reflect" ]
      [ "default" ]
      [ "multi-threaded" ]
    ];
    dependencies = {
      async_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.8.0" { inherit profileName; };
      bevy_ecs_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs_macros."0.11.0" { profileName = "__noProfile"; };
      bevy_ptr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ptr."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" { inherit profileName; };
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.2" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_ecs_macros."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ecs_macros";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a15ff7fcafdb8fe464ddd300b4860a76d5c6f9d684472e4bf21852d6f0ff3991"; };
    dependencies = {
      bevy_macro_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_macro_utils."0.11.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_egui."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_egui";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a73a93a8cf6b8c744281d1b88f5b0fa278d608e909af9bbf4eb491a7cb1ad2c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "arboard")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default_fonts")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "manage_clipboard")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "open_url")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "thread_local")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "webbrowser")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && !(hostPlatform.parsed.cpu.name == "wasm32") then "arboard" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arboard."3.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bevy" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.11.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "egui" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".egui."0.22.0" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && !(hostPlatform.parsed.cpu.name == "wasm32") then "thread_local" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.7" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "webbrowser" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webbrowser."0.8.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_encase_derive."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_encase_derive";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6bdf808dbdc68a0c519e09026c627bda85250205a40ac02794866bff254d6b56"; };
    dependencies = {
      bevy_macro_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_macro_utils."0.11.0" { inherit profileName; };
      encase_derive_impl = rustPackages."registry+https://github.com/rust-lang/crates.io-index".encase_derive_impl."0.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_gilrs."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_gilrs";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b877a371caa64edd6ec5d66b47c67b9e9e9acff2f3bcc51e31e175463e89f6ba"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_input = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.11.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.11.0" { inherit profileName; };
      bevy_time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_time."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      gilrs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gilrs."0.10.2" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_gizmos."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_gizmos";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7938b43b4bdf9d039b7d3b310f871ed5ffa5a185e861a9c85731c40182019f8d"; };
    features = builtins.concatLists [
      [ "bevy_pbr" ]
      [ "bevy_sprite" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "webgl")
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.11.0" { inherit profileName; };
      bevy_core_pipeline = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core_pipeline."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_pbr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_pbr."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" { inherit profileName; };
      bevy_sprite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_gltf."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_gltf";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f09b699698a2f5843ef63064010a5e7783403f99a697a04f41a2f8141cb4245d"; };
    features = builtins.concatLists [
      [ "bevy_animation" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" { inherit profileName; };
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; };
      bevy_animation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_animation."0.11.0" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.11.0" { inherit profileName; };
      bevy_core_pipeline = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core_pipeline."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_hierarchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_hierarchy."0.11.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_pbr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_pbr."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" { inherit profileName; };
      bevy_scene = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_scene."0.11.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      gltf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gltf."1.1.0" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.96" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_hanabi."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_hanabi";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03238827ce780a00e7ab07fcdc59d8a90424fee861f95d37b3a23deab061d56d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "3d")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "anyhow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bevy" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.11.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bytemuck" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "copyless" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "rand" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "rand_pcg" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "ron" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "typetag" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typetag."0.2.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_hierarchy."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_hierarchy";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba41e1bb0c367b31e59b53ab858de56764c78bee87c121843c1ff033efa0086c"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_input";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7221091c7b219a63a1f3f019512e8b72bed673230b97c3fcbca37ba566b1cffb"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "serialize" ]
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_internal."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_internal";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0f232e7bd2566abd05656789e3c6278a5ca2a24f1232dff525e5b0233a99a610"; };
    features = builtins.concatLists [
      [ "android_shared_stdcxx" ]
      [ "animation" ]
      [ "bevy_animation" ]
      [ "bevy_asset" ]
      [ "bevy_audio" ]
      [ "bevy_core_pipeline" ]
      [ "bevy_gilrs" ]
      [ "bevy_gizmos" ]
      [ "bevy_gltf" ]
      [ "bevy_pbr" ]
      [ "bevy_render" ]
      [ "bevy_scene" ]
      [ "bevy_sprite" ]
      [ "bevy_text" ]
      [ "bevy_ui" ]
      [ "bevy_winit" ]
      (lib.optional (rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default_font")
      [ "filesystem_watcher" ]
      [ "hdr" ]
      [ "ktx2" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "multi-threaded")
      [ "png" ]
      [ "serialize" ]
      [ "tonemapping_luts" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "vorbis")
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "webgl")
      [ "x11" ]
      [ "zstd" ]
    ];
    dependencies = {
      bevy_a11y = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_a11y."0.11.0" { inherit profileName; };
      bevy_animation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_animation."0.11.0" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_audio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_audio."0.11.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.11.0" { inherit profileName; };
      bevy_core_pipeline = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core_pipeline."0.11.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_diagnostic = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_diagnostic."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_gilrs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_gilrs."0.11.0" { inherit profileName; };
      bevy_gizmos = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_gizmos."0.11.0" { inherit profileName; };
      bevy_gltf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_gltf."0.11.0" { inherit profileName; };
      bevy_hierarchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_hierarchy."0.11.0" { inherit profileName; };
      bevy_input = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.11.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_pbr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_pbr."0.11.0" { inherit profileName; };
      bevy_ptr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ptr."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" { inherit profileName; };
      bevy_scene = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_scene."0.11.0" { inherit profileName; };
      bevy_sprite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.11.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.11.0" { inherit profileName; };
      bevy_text = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_text."0.11.0" { inherit profileName; };
      bevy_time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_time."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_ui = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ui."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.11.0" { inherit profileName; };
      bevy_winit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_winit."0.11.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_kira_audio."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_kira_audio";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fc50583e632d0173437cb618077f957c1eb7a9eef9bce107fbf9f90b22e4f84"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "mp3" ]
      [ "ogg" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" { inherit profileName; };
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.11.0" { inherit profileName; };
      kira = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kira."0.8.4" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_log";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "487dfd1fc75fada8f3f2f4773addf3fbba53a2a91cb913616e6dc6c26dd62995"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" then "android_log_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.3.0" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "console_error_panic_hook" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.7" { inherit profileName; };
      tracing_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.3" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.17" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "tracing_wasm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-wasm."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_macro_utils."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_macro_utils";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd3868e555723249fde3786891f35893b3001b2be4efb51f431467cb7fc378cd"; };
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
      toml_edit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.19.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_math";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "25088c6598fe0b8ded992c781dc49e613993c7a4e6a731c0f2ab0408add6afdb"; };
    features = builtins.concatLists [
      [ "serialize" ]
    ];
    dependencies = {
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.24.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_mikktspace."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_mikktspace";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "99dde80034660f7dbb473141c31f0a746acc7229f5a06ce769aba5f16fd592ab"; };
    dependencies = {
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.24.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_mod_inverse_kinematics."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_mod_inverse_kinematics";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1e3090d4c9ef42055323e38d9feb99772dc1dcacb3be5da8cbdc8de947c1a51"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bevy" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.11.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_pbr."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_pbr";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3efec2ae4b4f9fd38b82b93350499dac2dc6f07e63ef50a03c00c52075e2dea8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "webgl")
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_core_pipeline = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core_pipeline."0.11.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.11.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.3.3" { inherit profileName; };
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      naga_oil = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga_oil."0.8.1" { inherit profileName; };
      radsort = rustPackages."registry+https://github.com/rust-lang/crates.io-index".radsort."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_ptr."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ptr";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c74fcf37593a0053f539c3b088f34f268cbefed031d8eb8ff0fb10d175160242"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_rapier3d."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_rapier3d";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "12402872b857ba490f1040ab6212915bd9bf25f8584b31f2c43cef41b33f3be4"; };
    features = builtins.concatLists [
      [ "async-collider" ]
      [ "debug-render-3d" ]
      [ "default" ]
      [ "dim3" ]
      [ "enhanced-determinism" ]
    ];
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.11.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      nalgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.32.3" { inherit profileName; };
      rapier3d = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rapier3d."0.17.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_reflect";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "362492a6b66f676176705cc06017b012320fa260a9cf4baf3513387e9c05693e"; };
    features = builtins.concatLists [
      [ "bevy" ]
      [ "bevy_math" ]
      [ "default" ]
      [ "glam" ]
      [ "smallvec" ]
      [ "smol_str" ]
    ];
    dependencies = {
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_ptr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ptr."0.11.0" { inherit profileName; };
      bevy_reflect_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      erased_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".erased-serde."0.3.25" { inherit profileName; };
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.24.1" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      smol_str = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smol_str."0.2.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_reflect_derive."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_reflect_derive";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e974d78eaf1b45e1b4146711b5c16e37c24234e12f3a52f5f2e28332c969d3c"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bevy_macro_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_macro_utils."0.11.0" { inherit profileName; };
      bit_set = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_render";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46e4b6a82c3a2be1c0d0cbecf62debb8251b72c0ae76285f66265aabc5bf2d37"; };
    features = builtins.concatLists [
      [ "hdr" ]
      [ "ktx2" ]
      [ "png" ]
      [ "ruzstd" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "webgl")
      [ "zstd" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" { inherit profileName; };
      async_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.8.0" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core."0.11.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_encase_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_encase_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_hierarchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_hierarchy."0.11.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_mikktspace = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_mikktspace."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render_macros."0.11.0" { profileName = "__noProfile"; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.11.0" { inherit profileName; };
      bevy_time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_time."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.11.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.3.3" { inherit profileName; };
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      codespan_reporting = rustPackages."registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      encase = rustPackages."registry+https://github.com/rust-lang/crates.io-index".encase."0.6.1" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" { inherit profileName; };
      hexasphere = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hexasphere."9.1.0" { inherit profileName; };
      image = rustPackages."registry+https://github.com/rust-lang/crates.io-index".image."0.24.6" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      ktx2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ktx2."0.3.0" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.12.3" { inherit profileName; };
      naga_oil = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga_oil."0.8.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" { inherit profileName; };
      ruzstd = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ruzstd."0.4.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.7" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
      wgpu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu."0.16.3" { inherit profileName; };
      wgpu_hal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-hal."0.16.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_render_macros."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_render_macros";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "07c4d937f966644f5e1e3c9157736acdd36286bcce06142ff9ad25cd71348c09"; };
    dependencies = {
      bevy_macro_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_macro_utils."0.11.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_scene."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_scene";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf1e00eb30e2053d9fff0802b2f557350b4e66bac58d531de30882048b4e3232"; };
    features = builtins.concatLists [
      [ "bevy_render" ]
      [ "default" ]
      [ "serialize" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_hierarchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_hierarchy."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      ron = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.8.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_sprite";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03f64119444ef9788dcdd05012a60f0fa3b7ddb396d434ebcfc3edefd76c91b5"; };
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_core_pipeline = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core_pipeline."0.11.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.3.3" { inherit profileName; };
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.2" { inherit profileName; };
      guillotiere = rustPackages."registry+https://github.com/rust-lang/crates.io-index".guillotiere."0.6.2" { inherit profileName; };
      rectangle_pack = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rectangle-pack."0.4.2" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_tasks";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "faab904296a3d6976bb8a12bc0f42f6c98fb6cd87a96244e0151d359f684ec2d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "multi-threaded" ]
    ];
    dependencies = {
      async_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.8.0" { inherit profileName; };
      async_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-executor."1.5.1" { inherit profileName; };
      async_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-task."4.4.0" { inherit profileName; };
      concurrent_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.2.0" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.36" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_text."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_text";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b52a19b3d0caf20acd1bdb47b6a00717accc834b46c4f204a63de15cea45ec4b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default_font")
    ];
    dependencies = {
      ab_glyph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.21" { inherit profileName; };
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" { inherit profileName; };
      bevy_sprite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.11.0" { inherit profileName; };
      glyph_brush_layout = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_time."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_time";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d09225ad2ffef14da000080143730b36ba225844ae479e4791cdb9d08066d06a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "serialize" ]
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.8" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_transform";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da8a0cd3780e120e20be333cc48d41cb74620d798dc61bc18eb2a82d3545e184"; };
    features = builtins.concatLists [
      [ "serialize" ]
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_hierarchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_hierarchy."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_ui."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ui";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb85992eb5809936b3326940dc8d6e7b219af3dde1ecbca5948addd6a78694cc"; };
    features = builtins.concatLists [
      [ "bevy_text" ]
    ];
    dependencies = {
      bevy_a11y = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_a11y."0.11.0" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_core_pipeline = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_core_pipeline."0.11.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_hierarchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_hierarchy."0.11.0" { inherit profileName; };
      bevy_input = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.11.0" { inherit profileName; };
      bevy_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_log."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_render = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_render."0.11.0" { inherit profileName; };
      bevy_sprite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_sprite."0.11.0" { inherit profileName; };
      bevy_text = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_text."0.11.0" { inherit profileName; };
      bevy_transform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_transform."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.11.0" { inherit profileName; };
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      taffy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".taffy."0.3.12" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_utils";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10bfde141f0cdd15e07bca72f4439a9db80877c283738f581d061972ef483b1b"; };
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.3" { inherit profileName; };
      bevy_utils_proc_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils_proc_macros."0.11.0" { profileName = "__noProfile"; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.0" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      petgraph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".petgraph."0.6.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_utils_proc_macros."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_utils_proc_macros";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e37f2e885b0e8af59dc19871c313d3cf2a2495db35bb4d4ae0a61b3f87d5401"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_window";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0528832361e3d942df287c90537ef6fafb726c4934468a7c3a5d53d659bfbf54"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "serialize" ]
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_input = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_reflect = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_reflect."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy_winit."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_winit";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "24c6709dc70cfee1eb94d5f125d29612c4a9345dfc1a70dd3189af927b2fd503"; };
    features = builtins.concatLists [
      [ "x11" ]
    ];
    dependencies = {
      accesskit_winit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".accesskit_winit."0.14.1" { inherit profileName; };
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      bevy_a11y = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_a11y."0.11.0" { inherit profileName; };
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_derive."0.11.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_hierarchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_hierarchy."0.11.0" { inherit profileName; };
      bevy_input = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_input."0.11.0" { inherit profileName; };
      bevy_math = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_math."0.11.0" { inherit profileName; };
      bevy_tasks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_tasks."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
      bevy_window = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_window."0.11.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "crossbeam_channel" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.8" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
      winit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.28.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bindgen."0.64.0" = overridableMkRustCrate (profileName: rec {
    name = "bindgen";
    version = "0.64.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4243e6031260db77ede97ad86c27e501d646a27ab57b59a574f725d98ab1fb4"; };
    features = builtins.concatLists [
      [ "runtime" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cexpr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" { inherit profileName; };
      clang_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.6.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      lazycell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; };
      peeking_take_while = rustPackages."registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      shlex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.1.0" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-set";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bit_vec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-vec";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."2.3.3" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "2.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "630be753d4e58660abd17930c71b647fe46c27ea6b63cc59e1e3851406972e42"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "block";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-sys."0.1.0-beta.1" = overridableMkRustCrate (profileName: rec {
    name = "block-sys";
    version = "0.1.0-beta.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0fa55741ee90902547802152aaf3f8e5248aab7e21468089560d4c8840561146"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "apple" ]
      [ "std" ]
    ];
    dependencies = {
      objc_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc-sys."0.2.0-beta.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block2."0.2.0-alpha.6" = overridableMkRustCrate (profileName: rec {
    name = "block2";
    version = "0.2.0-alpha.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8dd9e63c1744f755c2f60332b88de39d341e5e86239014ad839bd71c106dec42"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "apple" ]
      [ "std" ]
    ];
    dependencies = {
      block_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-sys."0.1.0-beta.1" { inherit profileName; };
      objc2_encode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc2-encode."2.0.0-pre.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.13.0" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a3e2c3daef883ecc1b5d58c15adae93470a91d425f3532ba1695849656af3fc1"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck";
    version = "1.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "17febce684fd15d89027105661fec94afb475cb995fbc59d2865198446ba2eea"; };
    features = builtins.concatLists [
      [ "bytemuck_derive" ]
      [ "derive" ]
      [ "extern_crate_alloc" ]
    ];
    dependencies = {
      bytemuck_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck_derive."1.4.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck_derive."1.4.1" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck_derive";
    version = "1.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fdde5c9cd29ebd706ce1b35600920a33550e402fc998a2e53ad3b42c3c47a192"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "89b2fd2a0dcf38d7971e2194b6b6eebab45ae01067456a7fd93d5547a61b70be"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.79" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.79";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f"; };
    features = builtins.concatLists [
      [ "jobserver" ]
      [ "parallel" ]
    ];
    dependencies = {
      jobserver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.26" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cesu8";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "cexpr";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766"; };
    dependencies = {
      nom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "cfg_aliases";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.6.1" = overridableMkRustCrate (profileName: rec {
    name = "clang-sys";
    version = "1.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c688fc74432808e3eb684cae8830a86be1d66a2bd58e1f248ed0960a590baf6f"; };
    features = builtins.concatLists [
      [ "clang_3_5" ]
      [ "clang_3_6" ]
      [ "clang_3_7" ]
      [ "clang_3_8" ]
      [ "clang_3_9" ]
      [ "clang_4_0" ]
      [ "clang_5_0" ]
      [ "clang_6_0" ]
      [ "libloading" ]
      [ "runtime" ]
    ];
    dependencies = {
      glob = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; };
    };
    buildDependencies = {
      glob = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clipboard-win."4.5.0" = overridableMkRustCrate (profileName: rec {
    name = "clipboard-win";
    version = "4.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7191c27c2357d9b7ef96baac1773290d4ca63b24205b82a3fd8a0637afcf0362"; };
    dependencies = {
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "error_code" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".error-code."2.3.1" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "str_buf" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".str-buf."1.0.6" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "codespan-reporting";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e"; };
    dependencies = {
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.2.0" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "color_quant";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".com-rs."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "com-rs";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bf43edc576402991846b093a7ca18a3477e0ef9c588cde84964b5d3e43016642"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".combine."4.6.6" = overridableMkRustCrate (profileName: rec {
    name = "combine";
    version = "4.6.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "35ed6e9d84f0b51a7f52daf1c7d71dd136fd7a3f41a8462b8cdb8c78d920fad4"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "bytes" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "concurrent-queue";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62ec6771ecfa0762d24683ee5a32ad78487a3d3afdc0fb8cae19d2c5deb50b7c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.7" = overridableMkRustCrate (profileName: rec {
    name = "console_error_panic_hook";
    version = "0.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a06aeb73f470f66dcdbf7223caeebb85984942f22f1adb2a088cf9668146bbbc"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const_panic."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "const_panic";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58baae561b85ca19b3122a9ddd35c8ec40c3bcd14fe89921824eae73f7baffbf"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const_soft_float."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "const_soft_float";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87ca1caa64ef4ed453e68bb3db612e51cf1b2f5b871337f0fcab1c8f87cc3dff"; };
    features = builtins.concatLists [
      [ "no_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".constgebra."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "constgebra";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "edd23e864550e6dafc1e41ac78ce4f1ccddc8672b40c403524a04ff3f0518420"; };
    dependencies = {
      const_soft_float = rustPackages."registry+https://github.com/rust-lang/crates.io-index".const_soft_float."0.1.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "copyless";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2df960f5d869b2dd8532793fde43eb5427cceb126c929747a26823ab0eeb536"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e496a50fda8aacccc86d7529e2c1e0892dbd0f898a6b5645b5561b89c3210efa"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics";
    version = "0.22.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2581bbab3b8ffc6fcbd550bf46c355135d16e9ff2a6ea032ad6b9bf1d7efe4fb"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      core_graphics_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics-types";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a68b68b3446082644c91ac778bf50cd4104bfb002b5a6a7c44cca5a2c70788b"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".coreaudio-rs."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "coreaudio-rs";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cb17e2d1795b1996419648915df94bc7103c28f7b48062d7acf4652fc371b2ff"; };
    features = builtins.concatLists [
      [ "audio_toolbox" ]
      [ "audio_unit" ]
      [ "core_audio" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.6.2" { inherit profileName; };
      coreaudio_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".coreaudio-sys."0.2.12" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".coreaudio-sys."0.2.12" = overridableMkRustCrate (profileName: rec {
    name = "coreaudio-sys";
    version = "0.2.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f034b2258e6c4ade2f73bf87b21047567fb913ee9550837c2316d139b0262b24"; };
    features = builtins.concatLists [
      [ "audio_toolbox" ]
      [ "audio_unit" ]
      [ "core_audio" ]
    ];
    buildDependencies = {
      bindgen = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bindgen."0.64.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpal."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "cpal";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d959d90e938c5493000514b446987c07aed46c668faaa7d34d6c7a67b1a578c"; };
    features = builtins.concatLists [
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "netbsd" then "alsa" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alsa."0.7.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "core_foundation_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin" then "coreaudio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".coreaudio-rs."0.11.2" { inherit profileName; };
      dasp_sample = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dasp_sample."0.11.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "jni" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni."0.19.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" || hostPlatform.parsed.kernel.name == "emscripten" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "netbsd" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "mach2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach2."0.4.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_context" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "oboe" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oboe."0.5.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "windows" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" || hostPlatform.parsed.kernel.name == "emscripten" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.36" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" || hostPlatform.parsed.kernel.name == "emscripten" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows."0.46.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2801af0d36612ae591caa9568261fddce32ce6e08a7275ea334a06a4ad021a2c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "crossbeam-channel" ]
      [ "crossbeam-deque" ]
      [ "crossbeam-epoch" ]
      [ "crossbeam-queue" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.8" { inherit profileName; };
      crossbeam_deque = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.3" { inherit profileName; };
      crossbeam_epoch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.14" { inherit profileName; };
      crossbeam_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.8" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.8" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.5.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200"; };
    features = builtins.concatLists [
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-deque";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce6fd6f855243022dcecf8702fef0c297d4338e226845fe067f6341ad9fa0cef"; };
    features = builtins.concatLists [
      [ "crossbeam-epoch" ]
      [ "crossbeam-utils" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_epoch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.14" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.14" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-epoch";
    version = "0.9.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46bd5f3f85273295a9d14aedfb86f6aadbff6d8f5295c4a9edb08e819dcf5695"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.15" { inherit profileName; };
      memoffset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.8.0" { inherit profileName; };
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-queue";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d1cfb3ea8a53f37c40dea2c7bedcbd88bdfae54f5e2175d6ecaff1c988353add"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.15" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c063cd8cc95f5c377ed0d4b49a4b21f632396ff690e8470c29b3359b346984b"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ctor."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "ctor";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd4056f63fce3b82d852c3da92b08ea59959890813a7f4ce9c0ff85b10cf301b"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".d3d12."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "d3d12";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d8f0de2f5a8e7bd4a9eec0e3c781992a4ce1724f68aec7d7a3715344de8b39da"; };
    features = builtins.concatLists [
      [ "libloading" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dasp_sample."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "dasp_sample";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c87e182de0887fd5361989c677c4e8f5000cd9491d6d563161a8f3a5519fc7f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" = overridableMkRustCrate (profileName: rec {
    name = "data-encoding";
    version = "2.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c2e66c9d817f1720209181c316d28635c050fa304f9c79e47a520882661b7308"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" = overridableMkRustCrate (profileName: rec {
    name = "derive_more";
    version = "0.99.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321"; };
    features = builtins.concatLists [
      [ "display" ]
      [ "error" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".directories."5.0.0" = overridableMkRustCrate (profileName: rec {
    name = "directories";
    version = "5.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "74be3be809c18e089de43bdc504652bb2bc473fca8756131f8689db8cf079ba9"; };
    dependencies = {
      dirs_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs."4.0.0" = overridableMkRustCrate (profileName: rec {
    name = "dirs";
    version = "4.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "dirs_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6"; };
    dependencies = {
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.3" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "04414300db88f70d74c5ff54e50f9e1d1737d9a5b90f53fcf2e95ca2a9ab554b"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "dispatch";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "downcast-rs";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ea835d29036a4087793836fa931b08837ad5e957da9e23886b29586fb9b6650"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ecolor."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "ecolor";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e479a7fa3f23d4e794f8b2f8b3568dd4e47886ad1b12c9c095e141cb591eb63"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "bytemuck")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bytemuck" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".egui."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "egui";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a3aef8ec3ae1b772f340170c65bf27d5b8c28f543a0116c844d2ac08d01123e7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "bytemuck")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default_fonts")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "ahash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.3" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "epaint" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".epaint."0.22.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "nohash_hasher" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".either."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "either";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91"; };
    features = builtins.concatLists [
      [ "use_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".emath."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "emath";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3857d743a6e0741cdd60b622a74c7a36ea75f5f8f11b793b41d905d2c9721a4b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "bytemuck")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bytemuck" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encase."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "encase";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8fce2eeef77fd4a293a54b62aa00ac9daebfbcda4bf8998c5a815635b004aa1c"; };
    features = builtins.concatLists [
      [ "glam" ]
    ];
    dependencies = {
      const_panic = rustPackages."registry+https://github.com/rust-lang/crates.io-index".const_panic."0.2.7" { inherit profileName; };
      encase_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".encase_derive."0.6.1" { profileName = "__noProfile"; };
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.24.1" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encase_derive."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "encase_derive";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e520cde08cbf4f7cc097f61573ec06ce467019803de8ae82fb2823fa1554a0e"; };
    dependencies = {
      encase_derive_impl = rustPackages."registry+https://github.com/rust-lang/crates.io-index".encase_derive_impl."0.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encase_derive_impl."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "encase_derive_impl";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3fe2568f851fd6144a45fa91cfed8fe5ca8fc0b56ba6797bfc1ed2771b90e37c"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.32" = overridableMkRustCrate (profileName: rec {
    name = "encoding_rs";
    version = "0.8.32";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "071a31f4ee85403370b58aca746f01041ede6f0da2730960ad001edc2b71b394"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".epaint."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "epaint";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "09333964d4d57f40a85338ba3ca5ed4716070ab184dcfed966b35491c5c64f3b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "bytemuck")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default_fonts")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "ab_glyph" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.21" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "ahash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.3" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.cpu.name == "wasm32" then "atomic_refcell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic_refcell."0.1.10" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bytemuck" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "ecolor" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecolor."0.22.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "emath" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".emath."0.22.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "nohash_hasher" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && !(hostPlatform.parsed.cpu.name == "wasm32") then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".erased-serde."0.3.25" = overridableMkRustCrate (profileName: rec {
    name = "erased-serde";
    version = "0.3.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4f2b0c2380453a92ea8b6c8e5f64ecaafccddde8ceab55ff7a8ac1029f894569"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "alloc")
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".error-code."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "error-code";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "64f18991e7bf11e7ffee451b5318b5c1a73c52d0d0ada6e5a3017c8c1ced6a21"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "str_buf" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".str-buf."1.0.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".euclid."0.22.9" = overridableMkRustCrate (profileName: rec {
    name = "euclid";
    version = "0.22.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87f253bc5c813ca05792837a0ff4b3a580336b224512d48f7eda1d7dd9210787"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" = overridableMkRustCrate (profileName: rec {
    name = "event-listener";
    version = "2.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0206175f82b8d6bf6652ff7d71a1e27fd2e4efde587fd368662814d6ec1d9ce0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "wasi") then "instant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fdeflate."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "fdeflate";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d329bdeac514ee06249dabc27877490f17f5d371ec693360768b838e19f3ae10"; };
    dependencies = {
      simd_adler32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.21" = overridableMkRustCrate (profileName: rec {
    name = "filetime";
    version = "0.2.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5cbc844cecaee9d4443931972e1289c8ff485cb4cc2767cb03ca139ed6885153"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" { inherit profileName; };
      ${ if hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.26" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.26";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b9429470923de8e8cbd4d2dc513535400b4b3fef0319fb5c4e1f520a7bef743"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "miniz_oxide" ]
      [ "rust_backend" ]
    ];
    dependencies = {
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"; };
    dependencies = {
      foreign_types_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "form_urlencoded";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a62bc1cf6f830c2ec14a513a9fb124d0a213a629668a4186f329db21fe045652"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "alloc")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "percent_encoding" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fsevent-sys."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "fsevent-sys";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "76ee7a02da4d231650c7cea31349b889be2f45ddb3ef3032d2ec8185f6313fd2"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4bca583b7e26f571124fe5b7561d49cb2868d79116cfa0eefce955557c6fee8c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4fff74096e71ed47f8e023204cfd0aa1289cd54ae5430a9523be060cdb849964"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" = overridableMkRustCrate (profileName: rec {
    name = "futures-lite";
    version = "1.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49a9d51ce47660b1e808d3c990b4709f2f415d928835a17dfd16991515c46bce"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "fastrand" ]
      [ "futures-io" ]
      [ "memchr" ]
      [ "parking" ]
      [ "std" ]
      [ "waker-fn" ]
    ];
    dependencies = {
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.9.0" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.28" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      parking = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.1.0" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" { inherit profileName; };
      waker_fn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.0" { inherit profileName; };
    };
  });
  
  "unknown".gam."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "gam";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "bevy-debug-text-overlay")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "bevy_egui")
      (lib.optional (rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "bevy_hanabi")
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "bevy_mod_inverse_kinematics")
      (lib.optional (rootFeatures' ? "gam/debug") "debug")
      (lib.optional (rootFeatures' ? "gam/default") "default")
      (lib.optional (rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "graphics")
    ];
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.11.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy-debug-text-overlay" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bevy_debug_text_overlay" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy-debug-text-overlay."6.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bevy_egui" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_egui."0.21.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bevy_hanabi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_hanabi."0.7.0" { inherit profileName; };
      bevy_kira_audio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_kira_audio."0.16.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "bevy_mod_inverse_kinematics" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_mod_inverse_kinematics."0.4.0" { inherit profileName; };
      bevy_rapier3d = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_rapier3d."0.22.0" { inherit profileName; };
      directories = rustPackages."registry+https://github.com/rust-lang/crates.io-index".directories."5.0.0" { inherit profileName; };
      glob = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { inherit profileName; };
      iyes_progress = rustPackages."registry+https://github.com/rust-lang/crates.io-index".iyes_progress."0.9.1" { inherit profileName; };
      leafwing_input_manager = rustPackages."registry+https://github.com/rust-lang/crates.io-index".leafwing-input-manager."0.10.0" { inherit profileName; };
      nalgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.32.3" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.96" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gethostname."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "gethostname";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1ebd34e35c46e00bb73e81363248d627782724609fe1b6396f553f68fe3862e"; };
    dependencies = {
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && !hostPlatform.isWindows then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be4136b2a15dd319360be1c07d9933517ccf0be8f16bf62a3bee4f0d618df427"; };
    features = builtins.concatLists [
      [ "js" ]
      [ "js-sys" ]
      [ "std" ]
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if (hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.cpu.name == "wasm64") && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; };
      ${ if (hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.cpu.name == "wasm64") && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ghost."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "ghost";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e77ac7b51b8e6313251737fcef4b1c01a2ea102bde68415b62c0ee9268fec357"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gilrs."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "gilrs";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62fd19844d0eb919aca41d3e4ea0e0b6bf60e1e827558b101c269015b8f5f27a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "wgi" ]
    ];
    dependencies = {
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      gilrs_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gilrs-core."0.5.5" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.3.3" { inherit profileName; };
      vec_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gilrs-core."0.5.5" = overridableMkRustCrate (profileName: rec {
    name = "gilrs-core";
    version = "0.5.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd745b0cb1a207756e8fabacf5623066ad6aa543ea0be4bab34e897e6bbe24f9"; };
    features = builtins.concatLists [
      [ "wgi" ]
      [ "windows" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "io_kit_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".io-kit-sys."0.3.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" then "libudev_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libudev-sys."0.1.4" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.26.2" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.3.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "darwin" then "vec_map" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows."0.48.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.27.2" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.27.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ad0a93d233ebf96623465aad4046a8d3aa4da22d4f4beba5388838c8a434bbb4"; };
    features = builtins.concatLists [
      [ "read" ]
      [ "read-core" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glam."0.24.1" = overridableMkRustCrate (profileName: rec {
    name = "glam";
    version = "0.24.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "42218cb640844e3872cc3c153dc975229e080a6c4733b34709ef445610550226"; };
    features = builtins.concatLists [
      [ "bytemuck" ]
      [ "default" ]
      [ "mint" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      mint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mint."0.5.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "glob";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glow."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "glow";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e007a07a24de5ecae94160f141029e9a347282cfe25d1d58d85d845cf3130f1"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "slotmap" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.6" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gltf."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "gltf";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1fd7703af6975def3b32573c60aaa5ebfebfab5d879da1e1315d87155ba57bcd"; };
    features = builtins.concatLists [
      [ "KHR_lights_punctual" ]
      [ "KHR_materials_unlit" ]
      [ "extras" ]
      [ "names" ]
      [ "utils" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      gltf_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gltf-json."1.1.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      urlencoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".urlencoding."2.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gltf-derive."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "gltf-derive";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67b33dbe598480111e3b2e5a1e9a7e52ad5df0f836e04b8c80fc96f52a9c9f2e"; };
    dependencies = {
      inflections = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inflections."1.1.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gltf-json."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "gltf-json";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5511a759d99beeeef064bd6f81e207c77e3a3431c7499d7590929e35de371f31"; };
    features = builtins.concatLists [
      [ "KHR_lights_punctual" ]
      [ "KHR_materials_unlit" ]
      [ "default" ]
      [ "extras" ]
      [ "names" ]
    ];
    dependencies = {
      gltf_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".gltf-derive."1.1.0" { profileName = "__noProfile"; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.164" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.96" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "glyph_brush_layout";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cc32c2334f00ca5ac3695c5009ae35da21da8c62d255b5b96d56e2597a637a38"; };
    dependencies = {
      ab_glyph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.21" { inherit profileName; };
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      xi_unicode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xi-unicode."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-alloc."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "gpu-alloc";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fc59e5f710e310e76e6707f86c561dd646f69a8876da9131703b2f717de818d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      gpu_alloc_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-alloc-types."0.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-alloc-types."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "gpu-alloc-types";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54804d0d6bc9d7f26db4eaec1ad10def69b599315f487d32c334a80d1efe67a5"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-allocator."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "gpu-allocator";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce95f9e2e11c2c6fadfce42b5af60005db06576f231f5c92550fdded43c423e8"; };
    features = builtins.concatLists [
      [ "d3d12" ]
      [ "public-winapi" ]
      [ "windows" ]
    ];
    dependencies = {
      backtrace = rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.67" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if hostPlatform.isWindows then "windows" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows."0.44.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "gpu-descriptor";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b0c02e1ba0bdb14e965058ca34e09c020f8e507a760df1121728e0aef68d57a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      gpu_descriptor_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor-types."0.1.1" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor-types."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "gpu-descriptor-types";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "363e3677e55ad168fef68cf9de3a4a310b53124c5e784c53a1d70e92d23f2126"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".grid."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "grid";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0634107a3a005070dd73e27e74ecb691a94e9e5ba7829f434db7fbf73a6b5c47"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      no_std_compat = rustPackages."registry+https://github.com/rust-lang/crates.io-index".no-std-compat."0.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".guillotiere."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "guillotiere";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b62d5865c036cb1393e23c50693df631d3f5d7bcca4c04fe4cc0fd592e74a782"; };
    dependencies = {
      euclid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".euclid."0.22.9" { inherit profileName; };
      svg_fmt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".svg_fmt."0.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "default" ]
      [ "inline-more" ]
      [ "raw" ]
    ];
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c6201b9ff9fd90a5a3bac2e56a830d0caa509576f0e503818ee82c181b3437a"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "allocator-api2" ]
      [ "default" ]
      [ "inline-more" ]
      [ "serde" ]
    ];
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.3" { inherit profileName; };
      allocator_api2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".allocator-api2."0.2.16" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hassle-rs."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "hassle-rs";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1397650ee315e8891a0df210707f0fc61771b0cc518c3023896064c5407cb3b0"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      com_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".com-rs."0.2.1" { inherit profileName; };
      ${ if !hostPlatform.isWindows then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      widestring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".widestring."1.0.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hexasphere."9.1.0" = overridableMkRustCrate (profileName: rec {
    name = "hexasphere";
    version = "9.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7cb3df16a7bcb1b5bc092abd55e14f77ca70aea14445026e264586fc62889a10"; };
    dependencies = {
      constgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".constgebra."0.1.3" { inherit profileName; };
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.24.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hexf-parse."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "hexf-parse";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dfa686283ad6dd069f105e5ab091b04c62850d3e4cf5d67debad1933f55023df"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "alloc")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "unicode_bidi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.13" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "unicode_normalization" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.22" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".image."0.24.6" = overridableMkRustCrate (profileName: rec {
    name = "image";
    version = "0.24.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "527909aa81e20ac3a44803521443a765550f09b5130c2c2fa1ea59c2f8f50a3a"; };
    features = builtins.concatLists [
      [ "hdr" ]
      [ "png" ]
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "tiff")
    ];
    dependencies = {
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      color_quant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" { inherit profileName; };
      num_rational = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      png = rustPackages."registry+https://github.com/rust-lang/crates.io-index".png."0.17.8" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "tiff" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiff."0.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99"; };
    features = builtins.concatLists [
      [ "serde" ]
      [ "serde-1" ]
      [ "std" ]
    ];
    dependencies = {
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inflections."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "inflections";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a257582fdcde896fd96463bf2d40eefea0580021c0712a0e2b028b60b47a837a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inotify."0.9.6" = overridableMkRustCrate (profileName: rec {
    name = "inotify";
    version = "0.9.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8069d3ec154eb856955c1c0fbffefbf5f3c40a104ec912d4797314c1801abff"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      inotify_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inotify-sys."0.1.5" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inotify-sys."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "inotify-sys";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e05c02b5e89bff3b946cedeca278abc628fe811e604f027c45a8aa3cf793d0eb"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c"; };
    features = builtins.concatLists [
      [ "js-sys" ]
      [ "wasm-bindgen" ]
      [ "wasm-bindgen_rs" ]
      [ "web-sys" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "wasm_bindgen_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inventory."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "inventory";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7741301a6d6a9b28ce77c0fb77a4eb116b6bc8f3bef09923f7743d059c4157d3"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "ctor" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ctor."0.2.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "ghost" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ghost."0.1.9" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".io-kit-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "io-kit-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b2d4429acc1deff0fbdece0325b4997bdb02b2c245ab7023fd5deca0f6348de"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" { inherit profileName; };
      mach2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach2."0.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1c173a5686ce8bfa551b3563d0c2170bf24ca44da99c7ca4bfdab5418c3fe57"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_alloc" ]
      [ "use_std" ]
    ];
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iyes_progress."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "iyes_progress";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3f093e3b8f18730767ecf5b60c455b4f6b806d3c79ae2a31ca89d285718d635"; };
    features = builtins.concatLists [
      [ "assets" ]
      [ "bevy_asset" ]
    ];
    dependencies = {
      bevy_app = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_app."0.11.0" { inherit profileName; };
      bevy_asset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_asset."0.11.0" { inherit profileName; };
      bevy_ecs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_ecs."0.11.0" { inherit profileName; };
      bevy_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy_utils."0.11.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "jni";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c6df18c2e3db7e453d3c6ac5b3e9d5182664d28788126d39b91f2d1e22b017ec"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      cesu8 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" { inherit profileName; };
      combine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".combine."4.6.6" { inherit profileName; };
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
    buildDependencies = {
      walkdir = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni."0.20.0" = overridableMkRustCrate (profileName: rec {
    name = "jni";
    version = "0.20.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "039022cdf4d7b1cf548d31f60ae783138e5fd42013f6271049d7df7afadef96c"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      cesu8 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" { inherit profileName; };
      combine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".combine."4.6.6" { inherit profileName; };
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
    buildDependencies = {
      walkdir = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni."0.21.1" = overridableMkRustCrate (profileName: rec {
    name = "jni";
    version = "0.21.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a87aa2bb7d2af34197c04845522473242e1aa17c12f4935d5856491a7fb8c97"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "cesu8" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "combine" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".combine."4.6.6" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "jni_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "walkdir" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jni-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.26" = overridableMkRustCrate (profileName: rec {
    name = "jobserver";
    version = "0.1.26";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "936cfd212a0155903bcbc060e316fb6cc7cbf2e1907329391ebadc1fe0ce77c2"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jpeg-decoder."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jpeg-decoder";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc0000e42512c92e31c2252315bda326620a4e034105e900c98ec492fa077b3e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.63";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2f37a4a5928311ac501dee68b3c7613a1037d0edb30c8e5427bd832d55d1b790"; };
    dependencies = {
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".khronos-egl."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "khronos-egl";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c2352bd1d0bceb871cb9d40f24360c8133c11d7486b68b5381c1dd1a32015e3"; };
    features = builtins.concatLists [
      [ "1_0" ]
      [ "1_1" ]
      [ "1_2" ]
      [ "1_3" ]
      [ "1_4" ]
      [ "1_5" ]
      [ "default" ]
      [ "dynamic" ]
      [ "libloading" ]
      [ "no-pkg-config" ]
      [ "pkg-config" ]
      [ "static" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.27" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kira."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "kira";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39ce67549ab39d620131643a37f60b520ec4ae4450dc230f4c6296d3533272a3"; };
    features = builtins.concatLists [
      [ "cpal" ]
      [ "mp3" ]
      [ "ogg" ]
      [ "symphonia" ]
    ];
    dependencies = {
      atomic_arena = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic-arena."0.1.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.cpu.name == "wasm32" then "cpal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpal."0.15.2" { inherit profileName; };
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.24.1" { inherit profileName; };
      mint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mint."0.5.9" { inherit profileName; };
      ringbuf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ringbuf."0.3.3" { inherit profileName; };
      symphonia = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia."0.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kqueue."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "kqueue";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c8fc60ba15bf51257aa9807a48a61013db043fcf3a78cb0d916e8e396dcad98"; };
    dependencies = {
      kqueue_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kqueue-sys."1.0.3" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kqueue-sys."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "kqueue-sys";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8367585489f01bc55dd27404dcf56b95e6da061a256a666ab23be9ba96a2e587"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ktx2."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ktx2";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87d65e08a9ec02e409d27a0139eaa6b9756b4d81fe7cde71f6941a83730ce838"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "lazycell";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".leafwing-input-manager."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "leafwing-input-manager";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b56a6f71e8f5beefc8d3841ffa6ea9bbb1123956fa7c75fd673e69b65a8ca62f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "ui" ]
    ];
    dependencies = {
      bevy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy."0.11.0" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.2" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.11.0" { inherit profileName; };
      leafwing_input_manager_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".leafwing_input_manager_macros."0.9.0" { profileName = "__noProfile"; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      petitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".petitset."0.2.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".leafwing_input_manager_macros."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "leafwing_input_manager_macros";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11aefabfcc9ef0a78bc97eea053d2f1bb050d5278a4134bdc1b769064a90064a"; };
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lewton."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "lewton";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "777b48df9aaab155475a83a7df3070395ea1ac6902f5cd062b8f2b028075c030"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "ogg")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "ogg" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ogg."0.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "tinyvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.147";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b4668fb0ea861c1df094127ac5f1da3409a82116a4ba74fca2e58ef927159bb3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "extra_traits" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d580318f95776505201b28cf98eb1fa5e4be3b689633ba6a3e6cd880ff22d8cb"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libm."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "libm";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7012b1bbb0719e1097c47611d3898568c546d597c2e74d66f6087edd5233ff4"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libudev-sys."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "libudev-sys";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c8469b4a23b962c1396b9b451dda50ef5b283e8dd309d69033475fa9b334324"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.27" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.10" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1cc9717a20b1bb222f333e6a92fd32f7d8a18ddc5a3191a11af45dcbf4dcd16"; };
    features = builtins.concatLists [
      [ "atomic_usize" ]
      [ "default" ]
    ];
    dependencies = {
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b06a4cde4c0f271a446782e3eff8de789548ce57dbc8eca9292c27f4a42004b4"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mach2."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "mach2";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d0d1830bcd151a6fc4aea1369af235b36c1528fe976b8ff678683c9995eade8"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" = overridableMkRustCrate (profileName: rec {
    name = "malloc_buf";
    version = "0.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matchers."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "matchers";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558"; };
    dependencies = {
      regex_automata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matrixmultiply."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "matrixmultiply";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb99c395ae250e1bf9133673f03ca9f97b7e71b705436bf8f089453445d1e9fe"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      rawpointer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rawpointer."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
    ];
    buildDependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "autocfg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d61c719bcfbcf5d62b3a09efa6088de8c54bc0bfcd3ea7ae39fcc186108b8de1"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".metal."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "metal";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "de11355d1f6781482d027a3b4d4de7825dcedb197bf573e0596d00008402d060"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      core_graphics_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "minimal-lexical";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa"; };
    dependencies = {
      adler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7810e0be55b428ada41041c41f32c9f1a42817901b4ccf45fa3d4b6561e74c7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "simd" ]
      [ "simd-adler32" ]
      [ "with-alloc" ]
    ];
    dependencies = {
      adler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" { inherit profileName; };
      simd_adler32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mint."0.5.9" = overridableMkRustCrate (profileName: rec {
    name = "mint";
    version = "0.5.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e53debba6bda7a793e5f99b8dacf19e626084f525f7829104ba9898f367d85ff"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.8.8" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.8.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "927a765cd3fc26206e66b296465fa9d3e5ab003e651c1b3c060e7956d96b19d2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "log" ]
      [ "os-ext" ]
      [ "os-poll" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".naga."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "naga";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bbcc2e0513220fd2b598e6068608d4462db20322c0e77e47f6f488dfcfc279cb"; };
    features = builtins.concatLists [
      [ "clone" ]
      [ "codespan-reporting" ]
      [ "default" ]
      [ "glsl-in" ]
      [ "glsl-out" ]
      [ "hexf-parse" ]
      [ "hlsl-out" ]
      [ "msl-out" ]
      [ "pp-rs" ]
      [ "span" ]
      [ "spirv" ]
      [ "spv-out" ]
      [ "termcolor" ]
      [ "unicode-xid" ]
      [ "validate" ]
      [ "wgsl-in" ]
      [ "wgsl-out" ]
    ];
    dependencies = {
      bit_set = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      codespan_reporting = rustPackages."registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" { inherit profileName; };
      hexf_parse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hexf-parse."0.2.1" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      pp_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pp-rs."0.2.1" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      spirv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv."0.2.0+1.5.4" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.2.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".naga_oil."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "naga_oil";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d9c27fc9c84580434af75123d13ad98d9a56e16d033b16dcfa6940728c8c225"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "test_shader" ]
    ];
    dependencies = {
      bit_set = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" { inherit profileName; };
      codespan_reporting = rustPackages."registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" { inherit profileName; };
      data_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.12.3" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" { inherit profileName; };
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.29" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" { inherit profileName; };
      unicode_ident = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.32.3" = overridableMkRustCrate (profileName: rec {
    name = "nalgebra";
    version = "0.32.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "307ed9b18cc2423f29e83f84fd23a8e73628727990181f18641a8b5dc2ab1caa"; };
    features = builtins.concatLists [
      [ "convert-glam024" ]
      [ "default" ]
      [ "glam024" ]
      [ "libm" ]
      [ "macros" ]
      [ "matrixmultiply" ]
      [ "nalgebra-macros" ]
      [ "std" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      glam024 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.24.1" { inherit profileName; };
      matrixmultiply = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matrixmultiply."0.3.3" { inherit profileName; };
      nalgebra_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra-macros."0.2.1" { profileName = "__noProfile"; };
      num_complex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.3" { inherit profileName; };
      num_rational = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      simba = rustPackages."registry+https://github.com/rust-lang/crates.io-index".simba."0.8.1" { inherit profileName; };
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.16.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nalgebra-macros."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "nalgebra-macros";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91761aed67d03ad966ef783ae962ef9bbaca728d2dd7ceb7939ec110fffad998"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "451422b7e4718271c8b5b3aadf5adedba43dc76312454b387e98fae0fc951aa0"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      ffi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.4.1+23.1.7779620" { inherit profileName; };
      num_enum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.11" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "ndk-context";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "27b02d87554356db9e9a873add8782d4ea6e3e58ea071a9adb9a2e8ddb884a8b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.4.1+23.1.7779620" = overridableMkRustCrate (profileName: rec {
    name = "ndk-sys";
    version = "0.4.1+23.1.7779620";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3cf2aae958bd232cac5069850591667ad422d263686d75b52a065f9badeee5a3"; };
    dependencies = {
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.24.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa52e972a9a719cecb6864fb88568781eb706bac2cd1d4f04a648542dbf78069"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "acct")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "aio")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "dir")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "env")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "event")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "feature")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "fs")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "hostname")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "inotify")
      [ "ioctl" ]
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "kmod")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "memoffset")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "mman")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "mount")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "mqueue")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "net")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "personality")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "poll")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "process")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "pthread")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "ptrace")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "quota")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "reboot")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "resource")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "sched")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "signal")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "socket")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "term")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "time")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "ucontext")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "uio")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "user")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "zerocopy")
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.26.2" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.26.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfdda3d196821d6af13126e40375cdf7da646a96114af134d5f417a9a1dc8e1a"; };
    features = builtins.concatLists [
      [ "event" ]
      [ "ioctl" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".no-std-compat."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "no-std-compat";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b93853da6d84c2e3c7d730d6473e8817692dd89be387eb01b94d7f108ecb5b8c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "nohash-hasher";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2bf50223579dc7cdcfb3bfcacf7069ff68243f8c363f62ffa99cf000a6b9c451"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "7.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      minimal_lexical = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".notify."6.0.1" = overridableMkRustCrate (profileName: rec {
    name = "notify";
    version = "6.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5738a2795d57ea20abec2d6d76c6081186709c0024187cd5977265eda6598b51"; };
    features = builtins.concatLists [
      [ "crossbeam-channel" ]
      [ "default" ]
      [ "fsevent-sys" ]
      [ "macos_fsevent" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.8" { inherit profileName; };
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.21" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "fsevent_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fsevent-sys."4.1.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" then "inotify" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inotify."0.9.6" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonflybsd" then "kqueue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kqueue."1.0.7" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonflybsd" || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" then "mio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.8" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ntapi."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "ntapi";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e8a3895c6391c39d7fe7ebc444a87eb2991b2a0bc718fdabd071eec617fc68e4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "user" ]
    ];
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nu-ansi-term."0.46.0" = overridableMkRustCrate (profileName: rec {
    name = "nu-ansi-term";
    version = "0.46.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"; };
    dependencies = {
      overload = rustPackages."registry+https://github.com/rust-lang/crates.io-index".overload."0.1.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "num-complex";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "02e0d21255c828d6f128a1e41534206671e8c3ea0c62f32291e808dc82cff17d"; };
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-derive."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "num-derive";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "876a53fff98e03a936a674b29568b0e605f06b29372c2489ff4de23f1949743d"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.45" = overridableMkRustCrate (profileName: rec {
    name = "num-integer";
    version = "0.1.45";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "225d3389fb3509a24c93f5c29eb6bde2586b98d9f016636dff58d7c6f7569cd9"; };
    features = builtins.concatLists [
      [ "i128" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "num-rational";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0638a1c9d0a3c0914158145bc76cff373a75a627e6ecbfb71cbe6f453a5a19b0"; };
    dependencies = {
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.45" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "i128" ]
      [ "libm" ]
      [ "std" ]
    ];
    dependencies = {
      libm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.7" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.11" = overridableMkRustCrate (profileName: rec {
    name = "num_enum";
    version = "0.5.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f646caf906c20226733ed5b1374287eb97e3c2a5c227ce668c1f2ce20ae57c9"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_enum_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.5.11" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.5.11" = overridableMkRustCrate (profileName: rec {
    name = "num_enum_derive";
    version = "0.5.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dcbff9bc912032c62bf65ef1d5aea88983b420f4f839db1e9b0c281a25c9c799"; };
    features = builtins.concatLists [
      [ "proc-macro-crate" ]
      [ "std" ]
    ];
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "objc";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1"; };
    features = builtins.concatLists [
      [ "objc_exception" ]
    ];
    dependencies = {
      malloc_buf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" { inherit profileName; };
      objc_exception = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_exception."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc-foundation."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "objc-foundation";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1add1b659e36c9607c7aab864a76c7a4c2760cd0cd2e120f3fb8b952c7e22bf9"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "block" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "objc_id" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_id."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc-sys."0.2.0-beta.2" = overridableMkRustCrate (profileName: rec {
    name = "objc-sys";
    version = "0.2.0-beta.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df3b9834c1e95694a05a828b59f55fa2afec6288359cda67146126b3f90a55d7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "apple" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc2."0.3.0-beta.3.patch-leaks.3" = overridableMkRustCrate (profileName: rec {
    name = "objc2";
    version = "0.3.0-beta.3.patch-leaks.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e01640f9f2cb1220bbe80325e179e532cb3379ebcd1bf2279d703c19fe3a468"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "apple" ]
      [ "default" ]
      [ "foundation" ]
      [ "std" ]
    ];
    dependencies = {
      block2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block2."0.2.0-alpha.6" { inherit profileName; };
      objc_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc-sys."0.2.0-beta.2" { inherit profileName; };
      objc2_encode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc2-encode."2.0.0-pre.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc2-encode."2.0.0-pre.2" = overridableMkRustCrate (profileName: rec {
    name = "objc2-encode";
    version = "2.0.0-pre.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "abfcac41015b00a120608fdaa6938c44cb983fee294351cc4bac7638b4e50512"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "apple" ]
      [ "std" ]
    ];
    dependencies = {
      objc_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc-sys."0.2.0-beta.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc_exception."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "objc_exception";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4"; };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.79" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc_id."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "objc_id";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c92d4ddb4bd7b50d730c215ff871754d0da6b2178849f8a2a2ab69712d0c073b"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.30.4" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.30.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03b4680b86d9cfafba8fc491dc9b6df26b68cf40e9e6cd73909194759a63c385"; };
    features = builtins.concatLists [
      [ "archive" ]
      [ "coff" ]
      [ "elf" ]
      [ "macho" ]
      [ "pe" ]
      [ "read_core" ]
      [ "unaligned" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oboe."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "oboe";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8868cc237ee02e2d9618539a23a8d228b9bb3fc2e7a5b11eed3831de77c395d0"; };
    features = builtins.concatLists [
      [ "java-interface" ]
      [ "jni" ]
      [ "ndk" ]
      [ "ndk-context" ]
      [ "shared-stdcxx" ]
    ];
    dependencies = {
      jni = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni."0.20.0" { inherit profileName; };
      ndk = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" { inherit profileName; };
      ndk_context = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" { inherit profileName; };
      num_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num-derive."0.3.3" { profileName = "__noProfile"; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      oboe_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oboe-sys."0.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oboe-sys."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "oboe-sys";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f44155e7fb718d3cfddcf70690b2b51ac4412f347cd9e4fbe511abe9cd7b5f2"; };
    features = builtins.concatLists [
      [ "shared-stdcxx" ]
    ];
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.79" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ogg."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "ogg";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6951b4e8bf21c8193da321bcce9c9dd2e13c858fe078bf9054a288b419ae5d6e"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "race" ]
      [ "std" ]
      [ "unstable" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".optional."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "optional";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "978aa494585d3ca4ad74929863093e87cac9790d81fe7aba2b3dc2890643a0fc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".orbclient."0.3.44" = overridableMkRustCrate (profileName: rec {
    name = "orbclient";
    version = "0.3.44";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e9829e16c5e112e94efb5e2ad1fe17f8c1c99bb0fcdc8c65c44e935d904767d"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".overload."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "overload";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "owned_ttf_parser";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "706de7e2214113d63a8238d1910463cfce781129a6f263d13fdb09ff64355ba4"; };
    features = builtins.concatLists [
      [ "apple-layout" ]
      [ "default" ]
      [ "glyph-names" ]
      [ "opentype-layout" ]
      [ "std" ]
      [ "variable-fonts" ]
    ];
    dependencies = {
      ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.19.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "parking";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14f2252c834a40ed9bb5422029649578e63aa341ac401f74e719dd1afda8394e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.10" { inherit profileName; };
      parking_lot_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.8" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.9.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93f00c865fe7cabf650081affecd3871070f26767e7b2070a3ffae14c654b447"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.3.5" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "windows_targets" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parry3d."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "parry3d";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2d527d9e8d203c55e5d25811d6c65e120b577985cb9b64f00fdb9aaf8c3d80ea"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "dim3" ]
      [ "enhanced-determinism" ]
      [ "f32" ]
      [ "indexmap" ]
      [ "required-features" ]
      [ "rustc-hash" ]
      [ "slab" ]
      [ "spade" ]
      [ "std" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.8.1" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; };
      nalgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.32.3" { inherit profileName; };
      num_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num-derive."0.3.3" { profileName = "__noProfile"; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      simba = rustPackages."registry+https://github.com/rust-lang/crates.io-index".simba."0.8.1" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.8" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      spade = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spade."2.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".paste."1.0.12" = overridableMkRustCrate (profileName: rec {
    name = "paste";
    version = "1.0.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f746c4065a8fa3fe23974dd82f15431cc8d40779821001404d10d2e79ca7d79"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "peeking_take_while";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.0" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b2a4787296e9989611394c33f193f676704af1686e70b8f8033ab5ba9a35a94"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".petgraph."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "petgraph";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4dd7d28ee937e54fe3080c91faa1c3a46c06de6252988a7f4592ba2310ef22a4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "graphmap" ]
      [ "matrix_graph" ]
      [ "stable_graph" ]
    ];
    dependencies = {
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.2" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".petitset."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "petitset";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6b1a50d821a2526af6d5756c23c68e453532a986e361a3e12c9cc7fe61d862ac"; };
    features = builtins.concatLists [
      [ "serde" ]
      [ "serde_compat" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.27" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26072860ba924cbfa98ea39c8c19b4dd6a4a25423dbdf219c1eca91aa0cf6964"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".png."0.17.8" = overridableMkRustCrate (profileName: rec {
    name = "png";
    version = "0.17.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aaeebc51f9e7d2c150d3f3bfeb667f2aa985db5ef1e3d212847bdedb488beeaa"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; };
      fdeflate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fdeflate."0.3.0" { inherit profileName; };
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.26" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pp-rs."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "pp-rs";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb458bb7f6e250e6eb79d5026badc10a3ebb8f9a15d1fff0f13d17c71f4d6dee"; };
    dependencies = {
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "1.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919"; };
    dependencies = {
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      toml_edit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.19.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.60";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dec2b086b7a862cf4de201096214fa870344cf922b2b30c167badb3af3195406"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      unicode_ident = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.8" = overridableMkRustCrate (profileName: rec {
    name = "profiling";
    version = "1.0.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "332cd62e95873ea4f41f3dfd6bbbfc5b52aec892d7e8d534197c4720a0bbbab2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b9ab9c7eadfd8df19006f1cf1a4aed13540ed5cbc047010ece5826e10825488"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".radsort."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "radsort";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "17fd96390ed3feda12e1dfe2645ed587e0bea749e319333f104a33ff62f77a0b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      rand_chacha = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_pcg";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59cad018caf63deb318e5a4586d99a24424a364f40f1e5778c29aca23f4fc73e"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "rand_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "range-alloc";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c8a99fddc9f0ba0a85884b8d14e3592853e787d581ca1816c91349b10e4eeab"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rapier3d."0.17.2" = overridableMkRustCrate (profileName: rec {
    name = "rapier3d";
    version = "0.17.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62a8a0bd9d3135f7b4eb45d0796540e7bab47b6b7c974f90567ccc5a0454f42b"; };
    features = builtins.concatLists [
      [ "debug-render" ]
      [ "default" ]
      [ "dim3" ]
      [ "enhanced-determinism" ]
      [ "f32" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      bit_vec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      crossbeam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam."0.8.2" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      nalgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.32.3" { inherit profileName; };
      num_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num-derive."0.3.3" { profileName = "__noProfile"; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      parry3d = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parry3d."0.13.4" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      simba = rustPackages."registry+https://github.com/rust-lang/crates.io-index".simba."0.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "raw-window-handle";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f2ff9a1f06a88b01621b7ae906ef0211290d1c8a168a15542486a8f61c0833b9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rawpointer."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "rawpointer";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60a357793950651c4ed0f3f52338f53b2f809f32d83a07f72909fa13e4c6c1e3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rectangle-pack."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "rectangle-pack";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0d463f2884048e7153449a55166f91028d5b0ea53c79377099ce4e8cf0cf9bb"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.2.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "redox_users";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b"; };
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; };
      syscall = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d0ab3ca65655bb1e41f2a8c8cd662eb4fb035e67c3f78da1d61dffe89d07300f"; };
    features = builtins.concatLists [
      [ "aho-corasick" ]
      [ "default" ]
      [ "memchr" ]
      [ "perf" ]
      [ "perf-cache" ]
      [ "perf-dfa" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
    dependencies = {
      aho_corasick = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.0.2" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.7.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "regex-syntax" ]
      [ "std" ]
    ];
    dependencies = {
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.29" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.6.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "436b050e76ed2903236f032a59761c1eb99e1b0aead2c257922771dab1fc8c78"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".renderdoc-sys."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "renderdoc-sys";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "216080ab382b992234dda86873c18d4c48358f5cfcb70fd693d7f6f2131b628b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ringbuf."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "ringbuf";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79abed428d1fd2a128201cec72c5f6938e2da607c6f3745f769fabea399d950a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".robust."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "robust";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5864e7ef1a6b7bcf1d6ca3f655e65e724ed3b52546a0d0a663c991522f552ea"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rodio."0.17.1" = overridableMkRustCrate (profileName: rec {
    name = "rodio";
    version = "0.17.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bdf1d4dea18dff2e9eb6dca123724f8b60ef44ad74a9ad283cdfe025df7e73fa"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "lewton")
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "vorbis")
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      cpal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpal."0.15.2" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "lewton" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lewton."0.10.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ron."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "ron";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "300a51053b1cb55c80b7a9fde4120726ddf25ca241a1cbb926626f62fb136bff"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.23" = overridableMkRustCrate (profileName: rec {
    name = "rustc-demangle";
    version = "0.1.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hash";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ruzstd."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ruzstd";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3ffab8f9715a0d455df4bbb9d21e91135aab3cd3ca187af0cd0c3c3f868fdc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-core."1.0.38" { inherit profileName; };
      twox_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.13" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".safe_arch."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "safe_arch";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "794821e4ccb0d9f979512f9c1973480123f9bd62a90d74ab0f9426fcf8f4a529"; };
    features = builtins.concatLists [
      [ "bytemuck" ]
      [ "default" ]
    ];
    dependencies = {
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "same-file";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.164";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e8c8cf938e98f769bc164923b06dce91cea1751522f46f8466461af04c9027d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "alloc")
      [ "default" ]
      [ "derive" ]
      [ "serde_derive" ]
      [ "std" ]
    ];
    dependencies = {
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.164" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.164" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.164";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9735b638ccc51c28bf6914d90a2e9725b377144fc612c49a611fddd1b631d68"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.96" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.96";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "057d394a50403bcac12672b2b18fb387ab6d289d957dab67dd201875391e52f1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "raw_value" ]
      [ "std" ]
    ];
    dependencies = {
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.6" { inherit profileName; };
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.13" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "sharded-slab";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shlex."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "shlex";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "43b2853a4d09f215c24cc5489c992ce46052d359b5109343cbafbf26bc62f8a3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".simba."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "simba";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "061507c94fc6ab4ba1c9a0305018408e312e17c041eb63bef8aa726fa33aceae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "libm" ]
      [ "libm_force" ]
      [ "std" ]
      [ "wide" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      libm_force = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.7" { inherit profileName; };
      num_complex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.3" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      paste = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.12" { profileName = "__noProfile"; };
      wide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wide."0.7.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "simd-adler32";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "238abfbb77c1915110ad968465608b68e869e0772622c9656714e73e5a1a522f"; };
    features = builtins.concatLists [
      [ "const-generics" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.8" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6528351c9bc8ab22353f9d776db39a20288e8d6c37ef8cfe3317cf875eecfc2d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "slotmap";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1e08e261d0e8f5c43123b7adf3e4ca1690d655377ac93a03b2c9d3e98de1342"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0"; };
    features = builtins.concatLists [
      [ "const_generics" ]
      [ "serde" ]
      [ "union" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smol_str."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "smol_str";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "74212e6bbe9a4352329b2f68ba3130c15a3f26fe88ff22dbdc6cdd58fa85e99c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spade."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "spade";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "88e65803986868d2372c582007c39ba89936a36ea5f236bf7a7728dc258f04f9"; };
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      optional = rustPackages."registry+https://github.com/rust-lang/crates.io-index".optional."0.5.0" { inherit profileName; };
      robust = rustPackages."registry+https://github.com/rust-lang/crates.io-index".robust."0.2.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv."0.2.0+1.5.4" = overridableMkRustCrate (profileName: rec {
    name = "spirv";
    version = "0.2.0+1.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "246bfa38fe3db3f1dfc8ca5a2cdeb7348c78be2112740cc0ec8ef18b6d94f830"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "static_assertions";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".str-buf."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "str-buf";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e08d8363704e6c71fc928674353e6b7c23dcea9d82d7012c8faf2a3a025f8d0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".svg_fmt."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "svg_fmt";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8fb1df15f412ee2e9dfc1c504260fa695c1c3f10fe9f4a6ee2d2184d7d6450e2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".symphonia."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "symphonia";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3671dd6f64f4f9d5c87179525054cfc1f60de23ba1f193bd6ceab812737403f1"; };
    features = builtins.concatLists [
      [ "mp3" ]
      [ "ogg" ]
      [ "symphonia-bundle-mp3" ]
      [ "symphonia-codec-vorbis" ]
      [ "symphonia-format-ogg" ]
      [ "vorbis" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      symphonia_bundle_mp3 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-bundle-mp3."0.5.2" { inherit profileName; };
      symphonia_codec_vorbis = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-codec-vorbis."0.5.2" { inherit profileName; };
      symphonia_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-core."0.5.2" { inherit profileName; };
      symphonia_format_ogg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-format-ogg."0.5.2" { inherit profileName; };
      symphonia_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-metadata."0.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".symphonia-bundle-mp3."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "symphonia-bundle-mp3";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "55a0846e7a2c9a8081ff799fc83a975170417ad2a143f644a77ec2e3e82a2b73"; };
    features = builtins.concatLists [
      [ "mp3" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      symphonia_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-core."0.5.2" { inherit profileName; };
      symphonia_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-metadata."0.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".symphonia-codec-vorbis."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "symphonia-codec-vorbis";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7dfed6f7b6bfa21d7cef1acefc8eae5db80df1608a1aca91871b07cbd28d7b74"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      symphonia_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-core."0.5.2" { inherit profileName; };
      symphonia_utils_xiph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-utils-xiph."0.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".symphonia-core."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "symphonia-core";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6b9567e2d8a5f866b2f94f5d366d811e0c6826babcff6d37de9e1a6690d38869"; };
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".symphonia-format-ogg."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "symphonia-format-ogg";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "474df6e86b871dcb56913130bada1440245f483057c4a2d8a2981455494c4439"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      symphonia_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-core."0.5.2" { inherit profileName; };
      symphonia_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-metadata."0.5.2" { inherit profileName; };
      symphonia_utils_xiph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-utils-xiph."0.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".symphonia-metadata."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "symphonia-metadata";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "acd35c263223ef6161000be79b124a75de3e065eea563bf3ef169b3e94c7bb2e"; };
    dependencies = {
      encoding_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.32" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      symphonia_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-core."0.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".symphonia-utils-xiph."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "symphonia-utils-xiph";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce340a6c33ac06cb42de01220308ec056e8a2a3d5cc664aaf34567392557136b"; };
    dependencies = {
      symphonia_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-core."0.5.2" { inherit profileName; };
      symphonia_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".symphonia-metadata."0.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.109";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      [ "visit-mut" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      unicode_ident = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "2.0.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "32d41677bcbe24c20c52e7c70b0d8db04134c5d1066bf98662e2871ad200ea3e"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      [ "visit" ]
      [ "visit-mut" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      unicode_ident = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sysinfo."0.29.7" = overridableMkRustCrate (profileName: rec {
    name = "sysinfo";
    version = "0.29.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "165d6d8539689e3d3bc8b98ac59541e1f21c7de7c85d60dc80e43ae0ed2113db"; };
    features = builtins.concatLists [
      [ "apple-app-store" ]
      [ "apple-sandbox" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "core_foundation_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "unknown" || hostPlatform.parsed.cpu.name == "wasm32") then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if hostPlatform.isWindows then "ntapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ntapi."0.4.1" { inherit profileName; };
      ${ if hostPlatform.isWindows || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".taffy."0.3.12" = overridableMkRustCrate (profileName: rec {
    name = "taffy";
    version = "0.3.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3540ec65df399929a04a485feb50144475735920cc47eaf8eba09c70b1df4055"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "grid" ]
      [ "std" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      grid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".grid."0.9.0" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" { inherit profileName; };
      slotmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slotmap."1.0.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".termcolor."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "termcolor";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.40";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "978c9a314bd8dc99be594bc3c175faaa9794be04a5a5e153caba6915336cebac"; };
    dependencies = {
      thiserror_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.40" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-core."1.0.38" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-core";
    version = "1.0.38";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d97345f6437bb2004cd58819d8a9ef8e36cdd7661c2abc4bbde0a7c40d9f497"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      thiserror_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-core-impl."1.0.38" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-core-impl."1.0.38" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-core-impl";
    version = "1.0.38";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10ac1c5050e43014d16b2f94d0d2ce79e65ffdd8b38d8048f9c8f6a8a6da62ac"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.40" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.40";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f9456a42c5b0d803c8cd86e73dd7cc9edd429499f37a3550d286d5e86720569f"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.7" = overridableMkRustCrate (profileName: rec {
    name = "thread_local";
    version = "1.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3fdd6f064ccff2d6567adcb3873ca630700f00b5ad3f060c25b5dcfd9a4ce152"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiff."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "tiff";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7449334f9ff2baf290d55d73983a7d6fa15e01198faef72af07e2a8db851e471"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "flate2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.26" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "jpeg" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jpeg-decoder."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "weezl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".weezl."0.1.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "alloc")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "tinyvec_macros")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "tinyvec_macros" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec_macros";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "toml_datetime";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a76a9312f5ba4c2dec6b9161fdf25d87ad8a09256ccea5a556fef03c706a10f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.19.10" = overridableMkRustCrate (profileName: rec {
    name = "toml_edit";
    version = "0.19.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2380d56e8670370eee6566b0bfd4265f65b3f432e8c6d85623f728d4fa31f739"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; };
      toml_datetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.2" { inherit profileName; };
      winnow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winnow."0.4.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8"; };
    features = builtins.concatLists [
      [ "attributes" ]
      [ "default" ]
      [ "std" ]
      [ "tracing-attributes" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" { inherit profileName; };
      tracing_attributes = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.26" { profileName = "__noProfile"; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.26" = overridableMkRustCrate (profileName: rec {
    name = "tracing-attributes";
    version = "0.1.26";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5f4f31f56159e98206da9efd823404b79b6ef3143b4a7ab76e67b1751b25a4ab"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.31" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0955b8137a1df6f1a2e9a37d8a6656291ff0297c1a97c24e0d8425fe2312f79a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "once_cell" ]
      [ "std" ]
      [ "valuable" ]
    ];
    dependencies = {
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      ${ if false then "valuable" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".valuable."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "tracing-log";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "78ddad33d2d10b1ed7eb9d1f518a5674713876e97e5bb9b7345a7984fbb4f922"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "log-tracer" ]
      [ "std" ]
      [ "trace-logger" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.17" = overridableMkRustCrate (profileName: rec {
    name = "tracing-subscriber";
    version = "0.3.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "30a651bc37f915e81f087d86e62a18eec5f79550c7faff886f7090b4ea757c77"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "ansi" ]
      [ "default" ]
      [ "env-filter" ]
      [ "fmt" ]
      [ "matchers" ]
      [ "nu-ansi-term" ]
      [ "once_cell" ]
      [ "regex" ]
      [ "registry" ]
      [ "sharded-slab" ]
      [ "smallvec" ]
      [ "std" ]
      [ "thread_local" ]
      [ "tracing" ]
      [ "tracing-log" ]
    ];
    dependencies = {
      matchers = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchers."0.1.0" { inherit profileName; };
      nu_ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nu-ansi-term."0.46.0" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" { inherit profileName; };
      sharded_slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.4" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.7" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.31" { inherit profileName; };
      tracing_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-wasm."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "tracing-wasm";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4575c663a174420fa2d78f4108ff68f65bf2fbb7dd89f33749b6e826b3626e07"; };
    dependencies = {
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.17" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "ttf-parser";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44dcf002ae3b32cd25400d6df128c5babec3927cd1eb7ce813cfff20eb6c3746"; };
    features = builtins.concatLists [
      [ "apple-layout" ]
      [ "glyph-names" ]
      [ "opentype-layout" ]
      [ "std" ]
      [ "variable-fonts" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" = overridableMkRustCrate (profileName: rec {
    name = "twox-hash";
    version = "1.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typenum."1.16.0" = overridableMkRustCrate (profileName: rec {
    name = "typenum";
    version = "1.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "497961ef93d974e23eb6f433eb5fe1b7930b659f06d12dec6fc44a8f554c0bba"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typetag."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "typetag";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a6898cc6f6a32698cc3e14d5632a14d2b23ed9f7b11e6b8e05ce685990acc22"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "erased_serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".erased-serde."0.3.25" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "inventory" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inventory."0.3.5" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "typetag_impl" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".typetag-impl."0.2.8" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typetag-impl."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "typetag-impl";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c3e1c30cedd24fc597f7d37a721efdbdc2b1acae012c1ef1218f4c7c2c0f3e7"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_hanabi" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.13" = overridableMkRustCrate (profileName: rec {
    name = "unicode-bidi";
    version = "0.3.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "92888ba5573ff080736b3648696b70cafad7d250551175acbaa4e0385b3e1460"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "hardcoded-data")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "unicode-ident";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.22" = overridableMkRustCrate (profileName: rec {
    name = "unicode-normalization";
    version = "0.1.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "tinyvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "unicode-width";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "unicode-xid";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".url."2.4.0" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "2.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50bff7831e19200a85b17131d085c25d7811bc4e186efdaf54bbd132994a88cb"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "form_urlencoded" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "idna" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "percent_encoding" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".urlencoding."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "urlencoding";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "daf8dba3b7eb870caf1ddeed7bc9d2a049f3cfdfae7cb521b087cc33ae4c49da"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".uuid."1.3.3" = overridableMkRustCrate (profileName: rec {
    name = "uuid";
    version = "1.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "345444e32442451b267fc254ae85a209c64be56d2890e601a0c37ff0c3c5ecd2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "getrandom" ]
      [ "rng" ]
      [ "serde" ]
      [ "std" ]
      [ "v4" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".valuable."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "valuable";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "vec_map";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "waker-fn";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d5b2c62b4012a3e1eca5a7e077d13b3bf498c4073e33ccd58626607748ceeca"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.3" = overridableMkRustCrate (profileName: rec {
    name = "walkdir";
    version = "2.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "36df944cda56c7d8d8b7496af378e6b16de9284591917d307c9b4d313c44e698"; };
    dependencies = {
      same_file = rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.11.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.86";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5bba0e8cb82ba49ff4e229459ff22a191bbe9a1cb3a341610c9c33efc27ddf73"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "spans" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      wasm_bindgen_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.86" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.86" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.86";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19b04bc93f9d6bdee709f6bd2118f57dd6679cf1176a1af464fca3ab0d66d8fb"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.13.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.36" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-futures";
    version = "0.4.36";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2d1985d03709c53167ce907ff394f5316aa22cb4e12761295c5dc57dacb6297e"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if builtins.elem "atomics" hostPlatformFeatures then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.86" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.86";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14d6b024f1a526bb0234f52840389927257beb670610081360e5a03c5df9c258"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      wasm_bindgen_macro_support = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.86" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.86";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e128beba882dd1eb6200e1dc92ae6c5dbaa4311aa7bb211ca035779e5efc39f8"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" { inherit profileName; };
      wasm_bindgen_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.86" { inherit profileName; };
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.86" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.86";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed9d5b4305409d1fc9482fee2d7f9bcbf24b3972bf59817ef757e23982242a93"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.5" = overridableMkRustCrate (profileName: rec {
    name = "wayland-scanner";
    version = "0.29.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f4303d8fa22ab852f789e75a967f0a2cdc430a607751c0499bada3e451cbd53"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.63";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3bdd9ef4e984da1187bf8110c5cf5b845fbc87a23602cdf912386a76fcd3a7c2"; };
    features = builtins.concatLists [
      [ "AddEventListenerOptions" ]
      [ "AngleInstancedArrays" ]
      [ "AudioBuffer" ]
      [ "AudioBufferSourceNode" ]
      [ "AudioContext" ]
      [ "AudioContextOptions" ]
      [ "AudioContextState" ]
      [ "AudioDestinationNode" ]
      [ "AudioNode" ]
      [ "AudioScheduledSourceNode" ]
      [ "BaseAudioContext" ]
      [ "BeforeUnloadEvent" ]
      [ "Blob" ]
      [ "CanvasRenderingContext2d" ]
      [ "Clipboard" ]
      [ "CssStyleDeclaration" ]
      [ "DataTransfer" ]
      [ "Document" ]
      [ "DomException" ]
      [ "DomRect" ]
      [ "DomRectReadOnly" ]
      [ "DragEvent" ]
      [ "Element" ]
      [ "Event" ]
      [ "EventListenerOptions" ]
      [ "EventTarget" ]
      [ "ExtBlendMinmax" ]
      [ "ExtColorBufferFloat" ]
      [ "ExtColorBufferHalfFloat" ]
      [ "ExtDisjointTimerQuery" ]
      [ "ExtFragDepth" ]
      [ "ExtSRgb" ]
      [ "ExtShaderTextureLod" ]
      [ "ExtTextureFilterAnisotropic" ]
      [ "FocusEvent" ]
      [ "Gamepad" ]
      [ "GamepadButton" ]
      [ "GamepadMappingType" ]
      [ "Gpu" ]
      [ "GpuAdapter" ]
      [ "GpuAddressMode" ]
      [ "GpuAutoLayoutMode" ]
      [ "GpuBindGroup" ]
      [ "GpuBindGroupDescriptor" ]
      [ "GpuBindGroupEntry" ]
      [ "GpuBindGroupLayout" ]
      [ "GpuBindGroupLayoutDescriptor" ]
      [ "GpuBindGroupLayoutEntry" ]
      [ "GpuBlendComponent" ]
      [ "GpuBlendFactor" ]
      [ "GpuBlendOperation" ]
      [ "GpuBlendState" ]
      [ "GpuBuffer" ]
      [ "GpuBufferBinding" ]
      [ "GpuBufferBindingLayout" ]
      [ "GpuBufferBindingType" ]
      [ "GpuBufferDescriptor" ]
      [ "GpuCanvasAlphaMode" ]
      [ "GpuCanvasConfiguration" ]
      [ "GpuCanvasContext" ]
      [ "GpuColorDict" ]
      [ "GpuColorTargetState" ]
      [ "GpuCommandBuffer" ]
      [ "GpuCommandBufferDescriptor" ]
      [ "GpuCommandEncoder" ]
      [ "GpuCommandEncoderDescriptor" ]
      [ "GpuCompareFunction" ]
      [ "GpuCompilationInfo" ]
      [ "GpuCompilationMessage" ]
      [ "GpuCompilationMessageType" ]
      [ "GpuComputePassDescriptor" ]
      [ "GpuComputePassEncoder" ]
      [ "GpuComputePipeline" ]
      [ "GpuComputePipelineDescriptor" ]
      [ "GpuCullMode" ]
      [ "GpuDepthStencilState" ]
      [ "GpuDevice" ]
      [ "GpuDeviceDescriptor" ]
      [ "GpuDeviceLostInfo" ]
      [ "GpuDeviceLostReason" ]
      [ "GpuError" ]
      [ "GpuErrorFilter" ]
      [ "GpuExtent3dDict" ]
      [ "GpuFeatureName" ]
      [ "GpuFilterMode" ]
      [ "GpuFragmentState" ]
      [ "GpuFrontFace" ]
      [ "GpuImageCopyBuffer" ]
      [ "GpuImageCopyExternalImage" ]
      [ "GpuImageCopyTexture" ]
      [ "GpuImageCopyTextureTagged" ]
      [ "GpuImageDataLayout" ]
      [ "GpuIndexFormat" ]
      [ "GpuLoadOp" ]
      [ "GpuMipmapFilterMode" ]
      [ "GpuMultisampleState" ]
      [ "GpuObjectDescriptorBase" ]
      [ "GpuOrigin2dDict" ]
      [ "GpuOrigin3dDict" ]
      [ "GpuOutOfMemoryError" ]
      [ "GpuPipelineDescriptorBase" ]
      [ "GpuPipelineLayout" ]
      [ "GpuPipelineLayoutDescriptor" ]
      [ "GpuPowerPreference" ]
      [ "GpuPrimitiveState" ]
      [ "GpuPrimitiveTopology" ]
      [ "GpuProgrammableStage" ]
      [ "GpuQuerySet" ]
      [ "GpuQuerySetDescriptor" ]
      [ "GpuQueryType" ]
      [ "GpuQueue" ]
      [ "GpuRenderBundle" ]
      [ "GpuRenderBundleDescriptor" ]
      [ "GpuRenderBundleEncoder" ]
      [ "GpuRenderBundleEncoderDescriptor" ]
      [ "GpuRenderPassColorAttachment" ]
      [ "GpuRenderPassDepthStencilAttachment" ]
      [ "GpuRenderPassDescriptor" ]
      [ "GpuRenderPassEncoder" ]
      [ "GpuRenderPipeline" ]
      [ "GpuRenderPipelineDescriptor" ]
      [ "GpuRequestAdapterOptions" ]
      [ "GpuSampler" ]
      [ "GpuSamplerBindingLayout" ]
      [ "GpuSamplerBindingType" ]
      [ "GpuSamplerDescriptor" ]
      [ "GpuShaderModule" ]
      [ "GpuShaderModuleDescriptor" ]
      [ "GpuStencilFaceState" ]
      [ "GpuStencilOperation" ]
      [ "GpuStorageTextureAccess" ]
      [ "GpuStorageTextureBindingLayout" ]
      [ "GpuStoreOp" ]
      [ "GpuSupportedFeatures" ]
      [ "GpuSupportedLimits" ]
      [ "GpuTexture" ]
      [ "GpuTextureAspect" ]
      [ "GpuTextureBindingLayout" ]
      [ "GpuTextureDescriptor" ]
      [ "GpuTextureDimension" ]
      [ "GpuTextureFormat" ]
      [ "GpuTextureSampleType" ]
      [ "GpuTextureView" ]
      [ "GpuTextureViewDescriptor" ]
      [ "GpuTextureViewDimension" ]
      [ "GpuUncapturedErrorEvent" ]
      [ "GpuUncapturedErrorEventInit" ]
      [ "GpuValidationError" ]
      [ "GpuVertexAttribute" ]
      [ "GpuVertexBufferLayout" ]
      [ "GpuVertexFormat" ]
      [ "GpuVertexState" ]
      [ "GpuVertexStepMode" ]
      [ "HtmlCanvasElement" ]
      [ "HtmlElement" ]
      [ "HtmlImageElement" ]
      [ "HtmlMediaElement" ]
      [ "HtmlVideoElement" ]
      [ "ImageBitmap" ]
      [ "ImageBitmapRenderingContext" ]
      [ "ImageData" ]
      [ "KeyboardEvent" ]
      [ "MediaQueryList" ]
      [ "MediaQueryListEvent" ]
      [ "MessageEvent" ]
      [ "MouseEvent" ]
      [ "Navigator" ]
      [ "Node" ]
      [ "NodeList" ]
      [ "OesElementIndexUint" ]
      [ "OesStandardDerivatives" ]
      [ "OesTextureFloat" ]
      [ "OesTextureFloatLinear" ]
      [ "OesTextureHalfFloat" ]
      [ "OesTextureHalfFloatLinear" ]
      [ "OesVertexArrayObject" ]
      [ "OffscreenCanvas" ]
      [ "OvrMultiview2" ]
      [ "Performance" ]
      [ "PerformanceTiming" ]
      [ "PointerEvent" ]
      [ "Request" ]
      [ "Response" ]
      [ "UiEvent" ]
      [ "Url" ]
      [ "VideoFrame" ]
      [ "WebGl2RenderingContext" ]
      [ "WebGlActiveInfo" ]
      [ "WebGlBuffer" ]
      [ "WebGlFramebuffer" ]
      [ "WebGlProgram" ]
      [ "WebGlQuery" ]
      [ "WebGlRenderbuffer" ]
      [ "WebGlRenderingContext" ]
      [ "WebGlSampler" ]
      [ "WebGlShader" ]
      [ "WebGlSync" ]
      [ "WebGlTexture" ]
      [ "WebGlTransformFeedback" ]
      [ "WebGlUniformLocation" ]
      [ "WebGlVertexArrayObject" ]
      [ "WebglColorBufferFloat" ]
      [ "WebglCompressedTextureAstc" ]
      [ "WebglCompressedTextureEtc" ]
      [ "WebglCompressedTextureEtc1" ]
      [ "WebglCompressedTexturePvrtc" ]
      [ "WebglCompressedTextureS3tc" ]
      [ "WebglCompressedTextureS3tcSrgb" ]
      [ "WebglDebugRendererInfo" ]
      [ "WebglDebugShaders" ]
      [ "WebglDepthTexture" ]
      [ "WebglDrawBuffers" ]
      [ "WebglLoseContext" ]
      [ "WheelEvent" ]
      [ "Window" ]
      [ "Worker" ]
      [ "WorkerGlobalScope" ]
      [ "WorkerNavigator" ]
      [ "console" ]
      [ "gpu_map_mode" ]
    ];
    dependencies = {
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webbrowser."0.8.9" = overridableMkRustCrate (profileName: rec {
    name = "webbrowser";
    version = "0.8.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b692165700260bbd40fbc5ff23766c03e339fbaca907aeea5cb77bf0a553ca83"; };
    dependencies = {
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "haiku") then "dirs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs."4.0.0" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "android" then "jni" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni."0.21.1" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "android" then "ndk_context" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-context."0.1.1" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "ios" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.kernel.name == "ios" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "url" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.4.0" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".weezl."0.1.7" = overridableMkRustCrate (profileName: rec {
    name = "weezl";
    version = "0.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9193164d4de03a926d909d3bc7c30543cecb35400c02114792c2cae20d5e2dbb"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "alloc")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu."0.16.3" = overridableMkRustCrate (profileName: rec {
    name = "wgpu";
    version = "0.16.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "480c965c9306872eb6255fa55e4b4953be55a8b64d57e61d7ff840d3dcc051cd"; };
    features = builtins.concatLists [
      [ "default" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "hal")
      [ "naga" ]
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "webgl")
      (lib.optional (rootFeatures' ? "gam/bevy_mod_inverse_kinematics" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "wgc")
      [ "wgsl" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.12.3" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      profiling = rustPackages."registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.8" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.36" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
      wgc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-core."0.16.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "ios") && !(hostPlatform.parsed.kernel.name == "darwin") || !(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.isWindows || hostPlatform.parsed.cpu.name == "wasm32" then "hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-hal."0.16.2" { inherit profileName; };
      wgt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.16.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-core."0.16.1" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-core";
    version = "0.16.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f478237b4bf0d5b70a39898a66fa67ca3a007d79f2520485b8b0c3dfc46f8c2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "dx11" ]
      [ "dx12" ]
      [ "gles" ]
      [ "metal" ]
      [ "raw-window-handle" ]
      [ "vulkan" ]
      [ "wgsl" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      bit_vec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.3.3" { inherit profileName; };
      codespan_reporting = rustPackages."registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.12.3" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      profiling = rustPackages."registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.8" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten") then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
      hal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-hal."0.16.2" { inherit profileName; };
      wgt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.16.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-hal."0.16.2" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-hal";
    version = "0.16.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ecb3258078e936deee14fd4e0febe1cfe9bbb5ffef165cb60218d2ee5eb4448"; };
    features = builtins.concatLists [
      [ "ash" ]
      [ "bit-set" ]
      [ "block" ]
      [ "d3d12" ]
      [ "default" ]
      [ "dx11" ]
      [ "dx12" ]
      [ "dxc_shader_compiler" ]
      [ "foreign-types" ]
      [ "gles" ]
      [ "glow" ]
      [ "gpu-alloc" ]
      [ "gpu-allocator" ]
      [ "gpu-descriptor" ]
      [ "hassle-rs" ]
      [ "khronos-egl" ]
      [ "libloading" ]
      [ "metal" ]
      [ "range-alloc" ]
      [ "renderdoc" ]
      [ "renderdoc-sys" ]
      [ "smallvec" ]
      [ "vulkan" ]
      [ "windows_rs" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" then "android_system_properties" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" { inherit profileName; };
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "ash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ash."0.37.2+1.3.238" { inherit profileName; };
      ${ if hostPlatform.isWindows then "bit_set" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.3" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.3.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "block" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "core_graphics_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "d3d12" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".d3d12."0.6.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "foreign_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      glow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glow."0.12.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "gpu_alloc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-alloc."0.5.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "gpu_allocator" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-allocator."0.22.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "gpu_descriptor" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor."0.2.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "hassle_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hassle-rs."0.10.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten") then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.kernel.name == "emscripten" then "khronos_egl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".khronos-egl."4.1.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.kernel.name == "emscripten" then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.8.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "metal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".metal."0.24.0" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.12.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; };
      profiling = rustPackages."registry+https://github.com/rust-lang/crates.io-index".profiling."1.0.8" { inherit profileName; };
      ${ if hostPlatform.isWindows then "range_alloc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.3" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "renderdoc_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".renderdoc-sys."1.0.0" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.10.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.40" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten") then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten") then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
      wgt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.16.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.16.1" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-types";
    version = "0.16.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d0c153280bb108c2979eb5c7391cb18c56642dd3c072e55f52065e13e2a1252a"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.3.3" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.63" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wide."0.7.8" = overridableMkRustCrate (profileName: rec {
    name = "wide";
    version = "0.7.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b689b6c49d6549434bf944e6b0f39238cf63693cb7a147e9d887507fffa3b223"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      bytemuck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.13.1" { inherit profileName; };
      safe_arch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".safe_arch."0.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".widestring."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "widestring";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "653f141f39ec16bba3c5abe400a0c60da7468261cc2cbf36805022876bc721a8"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "basetsd")
      [ "cfg" ]
      [ "combaseapi" ]
      [ "consoleapi" ]
      [ "d3d11" ]
      [ "d3d11_1" ]
      [ "d3d11_2" ]
      [ "d3d11sdklayers" ]
      [ "d3d12" ]
      [ "d3d12sdklayers" ]
      [ "d3d12shader" ]
      [ "d3dcommon" ]
      [ "d3dcompiler" ]
      [ "dcomp" ]
      [ "dxgi1_2" ]
      [ "dxgi1_3" ]
      [ "dxgi1_4" ]
      [ "dxgi1_5" ]
      [ "dxgi1_6" ]
      [ "dxgidebug" ]
      [ "dxgiformat" ]
      [ "errhandlingapi" ]
      [ "evntrace" ]
      [ "fileapi" ]
      [ "handleapi" ]
      [ "heapapi" ]
      [ "ifdef" ]
      [ "impl-debug" ]
      [ "impl-default" ]
      [ "in6addr" ]
      [ "inaddr" ]
      [ "ioapiset" ]
      [ "iphlpapi" ]
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "knownfolders")
      [ "libloaderapi" ]
      [ "lmaccess" ]
      [ "lmapibuf" ]
      [ "lmcons" ]
      [ "memoryapi" ]
      [ "minwinbase" ]
      [ "minwindef" ]
      [ "netioapi" ]
      [ "ntlsa" ]
      [ "ntsecapi" ]
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "objbase")
      [ "objidl" ]
      [ "oleauto" ]
      [ "pdh" ]
      [ "powerbase" ]
      [ "processenv" ]
      [ "profileapi" ]
      [ "psapi" ]
      [ "rpcdce" ]
      [ "sddl" ]
      [ "securitybaseapi" ]
      [ "shellapi" ]
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "shlobj")
      [ "std" ]
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "stringapiset")
      [ "synchapi" ]
      [ "sysinfoapi" ]
      [ "wbemcli" ]
      [ "winbase" ]
      [ "wincon" ]
      [ "windef" ]
      [ "winerror" ]
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "wingdi")
      [ "winioctl" ]
      [ "winnt" ]
      [ "winsock2" ]
      [ "winuser" ]
      [ "wtypes" ]
    ];
    dependencies = {
      ${ if hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-wsapoll."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "winapi-wsapoll";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44c17110f57155602a80dca10be03852116403c9ff3cd25b079d666f2aa3df6e"; };
    dependencies = {
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows."0.44.0" = overridableMkRustCrate (profileName: rec {
    name = "windows";
    version = "0.44.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e745dab35a0c4c77aa3ce42d595e13d2003d6902d6b08c9ef5fc326d08da12b"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_Graphics" ]
      [ "Win32_Graphics_Direct3D" ]
      [ "Win32_Graphics_Direct3D12" ]
      [ "Win32_Graphics_Dxgi" ]
      [ "Win32_Graphics_Dxgi_Common" ]
      [ "Win32_Graphics_Gdi" ]
      [ "Win32_System" ]
      [ "Win32_System_Com" ]
      [ "Win32_System_LibraryLoader" ]
      [ "Win32_System_Ole" ]
      [ "Win32_System_Threading" ]
      [ "Win32_UI" ]
      [ "Win32_UI_Accessibility" ]
      [ "Win32_UI_Input" ]
      [ "Win32_UI_Input_KeyboardAndMouse" ]
      [ "Win32_UI_WindowsAndMessaging" ]
      [ "default" ]
      [ "implement" ]
      [ "windows-implement" ]
      [ "windows-interface" ]
    ];
    dependencies = {
      windows_implement = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-implement."0.44.0" { profileName = "__noProfile"; };
      windows_interface = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-interface."0.44.0" { profileName = "__noProfile"; };
      windows_targets = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.42.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows."0.46.0" = overridableMkRustCrate (profileName: rec {
    name = "windows";
    version = "0.46.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cdacb41e6a96a052c6cb63a144f24900236121c6f63f4f8219fef5977ecb0c25"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Devices" ]
      [ "Win32_Devices_Properties" ]
      [ "Win32_Foundation" ]
      [ "Win32_Media" ]
      [ "Win32_Media_Audio" ]
      [ "Win32_Media_KernelStreaming" ]
      [ "Win32_Media_Multimedia" ]
      [ "Win32_Security" ]
      [ "Win32_System" ]
      [ "Win32_System_Com" ]
      [ "Win32_System_Com_StructuredStorage" ]
      [ "Win32_System_Ole" ]
      [ "Win32_System_SystemServices" ]
      [ "Win32_System_Threading" ]
      [ "Win32_System_WindowsProgramming" ]
      [ "Win32_UI" ]
      [ "Win32_UI_Shell" ]
      [ "Win32_UI_Shell_PropertiesSystem" ]
      [ "default" ]
    ];
    dependencies = {
      windows_targets = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.42.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e686886bc078bc1b0b600cac0147aadb815089b6e4da64016cbd754b6342700f"; };
    features = builtins.concatLists [
      [ "Devices" ]
      [ "Devices_Power" ]
      [ "Foundation" ]
      [ "Foundation_Collections" ]
      [ "Gaming" ]
      [ "Gaming_Input" ]
      [ "Gaming_Input_ForceFeedback" ]
      [ "System" ]
      [ "System_Power" ]
      [ "default" ]
    ];
    dependencies = {
      windows_targets = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-implement."0.44.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-implement";
    version = "0.44.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ce87ca8e3417b02dc2a8a22769306658670ec92d78f1bd420d6310a67c245c6"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-interface."0.44.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-interface";
    version = "0.44.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "853f69a591ecd4f810d29f17e902d40e349fb05b0b11fff63b08b826bfe39c7f"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.45.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Devices" ]
      [ "Win32_Devices_HumanInterfaceDevice" ]
      [ "Win32_Foundation" ]
      [ "Win32_Globalization" ]
      [ "Win32_Graphics" ]
      [ "Win32_Graphics_Dwm" ]
      [ "Win32_Graphics_Gdi" ]
      [ "Win32_Media" ]
      [ "Win32_Security" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      [ "Win32_System_Com" ]
      [ "Win32_System_Com_StructuredStorage" ]
      [ "Win32_System_IO" ]
      [ "Win32_System_LibraryLoader" ]
      [ "Win32_System_Ole" ]
      [ "Win32_System_SystemInformation" ]
      [ "Win32_System_SystemServices" ]
      [ "Win32_System_Threading" ]
      [ "Win32_System_WindowsProgramming" ]
      [ "Win32_UI" ]
      [ "Win32_UI_Accessibility" ]
      [ "Win32_UI_Controls" ]
      [ "Win32_UI_HiDpi" ]
      [ "Win32_UI_Input" ]
      [ "Win32_UI_Input_Ime" ]
      [ "Win32_UI_Input_KeyboardAndMouse" ]
      [ "Win32_UI_Input_Pointer" ]
      [ "Win32_UI_Input_Touch" ]
      [ "Win32_UI_Shell" ]
      [ "Win32_UI_TextServices" ]
      [ "Win32_UI_WindowsAndMessaging" ]
      [ "default" ]
    ];
    dependencies = {
      windows_targets = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.42.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_Networking" ]
      [ "Win32_Networking_WinSock" ]
      [ "Win32_Security" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      [ "Win32_System_Diagnostics" ]
      [ "Win32_System_Diagnostics_Debug" ]
      [ "Win32_System_IO" ]
      [ "Win32_System_LibraryLoader" ]
      [ "Win32_System_Pipes" ]
      [ "Win32_System_WindowsProgramming" ]
      [ "default" ]
    ];
    dependencies = {
      windows_targets = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.42.2" { inherit profileName; };
      ${ if hostPlatform.config == "aarch64-pc-windows-msvc" || hostPlatform.config == "aarch64-uwp-windows-msvc" then "windows_aarch64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.42.2" { inherit profileName; };
      ${ if hostPlatform.config == "i686-pc-windows-gnu" || hostPlatform.config == "i686-uwp-windows-gnu" then "windows_i686_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.42.2" { inherit profileName; };
      ${ if hostPlatform.config == "i686-pc-windows-msvc" || hostPlatform.config == "i686-uwp-windows-msvc" then "windows_i686_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.42.2" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" || hostPlatform.config == "x86_64-uwp-windows-gnu" then "windows_x86_64_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.42.2" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.42.2" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-msvc" || hostPlatform.config == "x86_64-uwp-windows-msvc" then "windows_x86_64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.42.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5"; };
    dependencies = {
      ${ if false then "windows_aarch64_gnullvm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then "windows_aarch64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then "windows_i686_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then "windows_i686_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then "windows_x86_64_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.0" { inherit profileName; };
      ${ if false then "windows_x86_64_gnullvm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "msvc" then "windows_x86_64_msvc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winit."0.28.3" = overridableMkRustCrate (profileName: rec {
    name = "winit";
    version = "0.28.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4f504e8c117b9015f618774f8d58cd4781f5a479bc41079c064f974cbb253874"; };
    features = builtins.concatLists [
      [ "android-native-activity" ]
      [ "mio" ]
      [ "percent-encoding" ]
      [ "x11" ]
      [ "x11-dl" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" then "android_activity" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android-activity."0.4.1" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_graphics" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "dispatch" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.19" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "mio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.8" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.7.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin" then "objc2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc2."0.3.0-beta.3.patch-leaks.3" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "orbclient" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".orbclient."0.3.44" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "percent_encoding" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.0" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.5.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.3.5" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.86" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.63" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "x11_dl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.21.0" { inherit profileName; };
    };
    buildDependencies = {
      cfg_aliases = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" { profileName = "__noProfile"; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" then "wayland_scanner" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.29.5" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winnow."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "winnow";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61de7bac303dc551fe038e2b3cef0f571087a47571ea6e79a87692ac99b99699"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.21.0" = overridableMkRustCrate (profileName: rec {
    name = "x11-dl";
    version = "2.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38735924fedd5314a6e548792904ed8c6de6636285cb9fec04d5b1db85c1516f"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.27" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11rb."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "x11rb";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "592b4883219f345e712b3209c62654ebda0bb50887f330cbd018d0f654bfd507"; };
    dependencies = {
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "gethostname" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gethostname."0.2.3" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isUnix then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isWindows then "winapi_wsapoll" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-wsapoll."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics" then "x11rb_protocol" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11rb-protocol."0.10.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11rb-protocol."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "x11rb-protocol";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "56b245751c0ac9db0e006dc812031482784e434630205a93c73cfefcaabeac67"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "default")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "nix")
      (lib.optional (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") "std")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "gam/bevy_egui" || rootFeatures' ? "gam/default" || rootFeatures' ? "gam/graphics") && hostPlatform.isUnix then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xi-unicode."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "xi-unicode";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a67300977d3dc3f8034dae89778f502b6ba20b269527b3223ba59c0cf393bb8a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "xml-rs";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2d7d3948613f75c98fd9328cfdcc45acc4d360655289d0a7d4ec931392200a3"; };
  });
  
}
